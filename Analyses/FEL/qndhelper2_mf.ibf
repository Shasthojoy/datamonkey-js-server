/* 1. fit nucleotide model */	fprintf (intermediateHTML, "<DIV class = 'RepClassSM'><b>Phase 1</b> Fitting a nucleotide model (",ModelTitle,") to estimate relative branch lengths. \n");	for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)	{		ExecuteCommands ("Tree nucTree_" + fileID + "=" + treeStrings[fileID] + ";");	}	ExecuteCommands  (constructLF("nucLF", "nucData", "nucTree", fileCount));	Optimize 		 (nuc_res,nucLF);	fprintf (intermediateHTML, "LogL = ",Format(nuc_res[1][0],10,3), "</DIV><DIV class = 'RepClassSM'><b>Phase 2</b> Fitting a global codon model (for branch scaling)\n");/* 2. fit codon model */	global dNdS = 1;				 		CodonMatrix = {ModelMatrixDimension,ModelMatrixDimension};	rateMultipliers 		= {{""   ,"AC__*",""   ,"AT__*"}							   {"AC__*",""   ,"CG__*","CT__*"}							   {""   ,"CG__*",""   ,"GT__*"}							   {"AT__*","CT__*","GT__*","" }							  };	modelDefString = "";	modelDefString*16384;	hshift = 0;	for (h=0; h<64; h=h+1)	{		if (_Genetic_Code[h]==10) 		{			hshift = hshift+1;			continue; 		}		vshift = hshift;		for (v = h+1; v<64; v=v+1)		{			diff = v-h;			if (_Genetic_Code[v]==10) 			{				vshift = vshift+1;				continue; 			}			nucPosInCodon = 2;			if ((h$4==v$4)||((diff%4==0)&&(h$16==v$16))||(diff%16==0))			{				if (h$4==v$4)				{					transition = v%4;					transition2= h%4;				}				else				{					if(diff%16==0)					{						transition = v$16;						transition2= h$16;						nucPosInCodon = 0;					}					else					{						transition = v%16$4;						transition2= h%16$4;						nucPosInCodon = 1;					}				}				hs = Format(h-hshift,0,0);				vs = Format(v-vshift,0,0);				ts = Format(transition,0,0);				ts2= Format(transition2,0,0);				ps = Format(nucPosInCodon,0,0);				aa1 = _Genetic_Code[0][h];				aa2 = _Genetic_Code[0][v];								if (aa1==aa2) 				{					modelDefString*("CodonMatrix["+hs+"]["+vs+"] := synRate*"+rateMultipliers[transition][transition2]+"positionFrequencies__["+ts+"]["+ps+"];\n"+									"CodonMatrix["+vs+"]["+hs+"] := synRate*"+rateMultipliers[transition][transition2]+"positionFrequencies__["+ts2+"]["+ps+"];\n");				}				else				{					modelDefString*("CodonMatrix["+hs+"]["+vs+"] := nonSynRate*"+rateMultipliers[transition][transition2]+"positionFrequencies__["+ts+"]["+ps+"];\n"+									"CodonMatrix["+vs+"]["+hs+"] := nonSynRate*"+rateMultipliers[transition][transition2]+"positionFrequencies__["+ts2+"]["+ps+"];\n");				}			}	    }    }			modelDefString*0;	ExecuteCommands (modelDefString);		Model MGModel   = (CodonMatrix,codonFrequencies,0);		for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)	{		ExecuteCommands ("Tree codonTree_" + fileID + "=" + treeStrings[fileID] + ";");	}	synRate 	  = 1;	nonSynRate 	  = 1;	dNdS		= 1;		blCodon = 0;	for (h=0; h<ModelMatrixDimension; h=h+1)	{		blCodon = blCodon - CodonMatrix[h][h]*codonFrequencies[h];	}	blNuc = 0;	t 	  = 1;	for  (h=0; h<4; h=h+1)	{		blCodon2 = 0;		for (v=0; v<4; v=v+1)		{			if (h!=v)			{				blCodon2 = blCodon2 + NucleotideMatrix[h][v]*overallFrequencies[v];			}		}		blNuc = blNuc + overallFrequencies[h]*blCodon2;	}	ExecuteCommands (constructLF("lf", "filteredData", "codonTree", fileCount));		global rConstr 		= 1;	blCodon2 	   		= 0;	nonSynRate 		   	= 2;	for (h=0; h<ModelMatrixDimension; h=h+1)	{		blCodon2 = blCodon2 - CodonMatrix[h][h]*codonFrequencies[h];	}		blCodon2 = blCodon2-blCodon;	blCodon  = blCodon-blCodon2;		dNdS = 0.25;		global 	   rConstr = 3*blNuc/(blCodon+dNdS*blCodon2);	rConstr    :> 0;		for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)	{		ExecuteCommands ("ReplicateConstraint(\"this1.?.synRate:=rConstr*this2.?.t__\",codonTree_"+fileID+",nucTree_"+fileID+")");		ExecuteCommands ("ReplicateConstraint(\"this1.?.nonSynRate:=dNdS*this2.?.synRate\",codonTree_"+fileID+",codonTree_"+fileID+")");	}		rConstr := 3*blNuc__/(blCodon__+dNdS*blCodon2__);		USE_LAST_RESULTS			= 1;	OPTIMIZATION_METHOD			= 0;	if (fileCount == 1)	{		AUTO_PARALLELIZE_OPTIMIZE	= 4;	}	else	{		AUTO_PARALLELIZE_OPTIMIZE	= 1;			}		Optimize 				 	(resC,lf);		AUTO_PARALLELIZE_OPTIMIZE	= 0;	OPTIMIZATION_METHOD			= 4;		fprintf (intermediateHTML, "LogL = ",Format(resC[1][0],10,3), ", global dN/dS = ",Format(dNdS,8,3),"</DIV>");		if (meme == 0)	{		fprintf (intermediateHTML, 				"<DIV class = 'RepClassSM'><b>Phase 3</b> Fitting a codon model site-by-site\n<TABLE BORDER = '0' WIDTH = '95%' style = 'margin:10px;'><TR CLASS = 'HeaderClassSM'><TH>Codon</TH>");		for (h=0; h<Columns(labels); h=h+1)		{			fprintf (intermediateHTML, "<TH>", labels[h], "</TH>");		}							fprintf (intermediateHTML, "<TH>Est. remaining time (secs)</TH></TR>\n");	}	