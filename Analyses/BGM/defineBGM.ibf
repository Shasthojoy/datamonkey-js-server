function add_discrete_node (node_id, max_parents, sample_size, nlevels)
{
	node = {};
	node["NodeID"] = ""+node_id;
    node["NodeType"] = 0;
    node["MaxParents"] = max_parents;
	node["PriorSize"] = sample_size;
	node["NumLevels"] = nlevels;
	return node;
}

function add_gaussian_node (node_id, max_parents, sample_size, mean, precision, scale)
{
	node = {};
	node["NodeID"] = node_id;
    node["NodeType"] = 1;
	node["MaxParents"] = max_parents;
	node["PriorSize"] = sample_size;
	node["PriorMean"]	= mean;
	node["PriorPrecision"]	= precision;
	node["PriorScale"] = scale;
	return node;
}


/* ________________________________________________________________________	*/

nodes 			= {};


if (doAncestralResample)
{
	fprintf					  (stdout, CLEAR_FILE, "Here\n");
	GetString 				  (lfid, LikelihoodFunction, 0);
	fprintf					  (stdout, lfid, "\n");
	ExecuteAFile 			  ("AncestralMapperBGM.bf");
	fprintf                   (stdout,"\nHere2\n");
	
	
	ancCacheID 				= _buildAncestralCache (lfid, 0, 1);
    fprintf                    (stdout, "\nHere3\n");

	nbranches 				= nbranches-1;
	bgm_data_matrix 		= {nbranches, num_nodes};


	for (site = 0; site < num_nodes; site = site+1)
	{
		thisSite = _mapMutations(ancCacheID,site_map[site]-1,1);
		for (branch = 0; branch < nbranches; branch = branch+1)
		{
			bgm_data_matrix[branch][site] = thisSite[branch];
		}
	}
    fprintf                    (stdout, "\nHere4\n",bgm_data_matrix,"\n");
}
else
{
	num_nodes   			= Columns (bgm_data_matrix);
}

fprintf (stdout,"\n", num_nodes, "\n");

for (k = 0; k < num_nodes; k = k+1)
{
	fprintf (stdout, k, "/", num_nodes, " node made\n");
	nodes + add_discrete_node (k, num_parents, 0, 2);
}


BGM_MCMC_BURNIN		= BGM_MCMC_MAXSTEPS $ 10;
BGM_MCMC_SAMPLES 	= BGM_MCMC_MAXSTEPS $ 1000;

BGM_MCMC_MAXFAILS   = 100;
BGM_MCMC_PROBSWAP   = 0.1;

BayesianGraphicalModel gen_bgm = (nodes);
fprintf              (stdout, "\nHere5\n");



SetParameter 		(gen_bgm, BGM_DATA_MATRIX, 	 bgm_data_matrix);
BGM_OPTIMIZATION_METHOD = 4; // order-MCMC

fprintf              (stdout, "\nHere6\n");

Optimize         	 (postp, gen_bgm);

fprintf              (stdout, "\nHere7\n");

if (doAncestralResample)
{
	_destroyAncestralCache (ancCacheID);
}
