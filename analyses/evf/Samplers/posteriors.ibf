GetInformation(vars,"^P_[0-9]+");rateCount = Columns (vars)+1;ps 			 = {rateCount,1};reportMx	 = {rateCount,3};reportMx	 = reportMx["1"];for (mi = 0; mi < rateCount-1; mi=mi+1){	ExecuteCommands ("ps["+mi+"]="+"P_"+(mi+1)+";");}for (mi = 0; mi < rateCount; mi=mi+1){	ExecuteCommands ("reportMx[mi][1]="+"S_"+mi+"/c_scale;");	ExecuteCommands ("reportMx[mi][2]="+"NS_"+mi+"/c_scale;");}for (mi=0; mi<rateCount-1; mi=mi+1){	for (mi2 = 0; mi2 < mi; mi2=mi2+1)	{		reportMx[mi][0] = reportMx[mi][0] * (1-ps[mi2]);	}	reportMx[mi][0] = reportMx[mi][0] * ps[mi];}for (mi2 = 0; mi2 < mi; mi2=mi2+1){	reportMx[mi][0] = reportMx[mi][0] * (1-ps[mi2]);}ExecuteCommands ("ConstructCategoryMatrix (cm, `LF_NAME`, COMPLETE);");site_count 		= Columns (cm)/rateCount;posteriorProbs  = {site_count, rateCount};weightingFactors = Transpose(reportMx[-1][0]);posteriors = {site_count,1};priorPS		    = 0;weightF2		= {1,rateCount};for (h = 0; h<rateCount; h=h+1){	if (reportMx[h][1] < reportMx[h][2])	{		priorPS = priorPS + reportMx[h][0];		weightF2[h] = 1;	}}allPos = 0;allNeg = 0;if (priorPS > 0 && priorPS < 1){	priorPS = priorPS/(1-priorPS);}else{	if (priorPS == 0)	{		allNeg = 1;	}		else	{		allPos = 1;	}	}for (site_enumerator = 0; site_enumerator < site_count; site_enumerator = site_enumerator + 1){	sum = 0; 	smallestScaler = 1e100;	for (rate_enumerator = 0; rate_enumerator < rateCount; rate_enumerator = rate_enumerator + 1)	{		smallestScaler = Min(smallestScaler,cm.site_scalers[rate_enumerator*site_count+site_enumerator]);	}		for (rate_enumerator = 0; rate_enumerator < rateCount; rate_enumerator = rate_enumerator + 1)	{		v = cm[rate_enumerator*site_count+site_enumerator] * reportMx[rate_enumerator][0] * Exp(cm.log_scale_multiplier*(smallestScaler-cm.site_scalers[rate_enumerator*site_count+site_enumerator]));		posteriorProbs[site_enumerator] [rate_enumerator]= v;		sum = sum + v;	}	postPS = 0;	for (rate_enumerator = 0; rate_enumerator < rateCount; rate_enumerator = rate_enumerator + 1)	{		posteriorProbs[site_enumerator] [rate_enumerator] = posteriorProbs[site_enumerator] [rate_enumerator] / sum;				if (weightF2[rate_enumerator] > 0)		{			postPS = postPS + posteriorProbs[site_enumerator] [rate_enumerator];		}	}			if (allPos + allNeg == 0)	{		if (postPS == 0)		{			posteriors[site_enumerator] = 0;		}		else		{			if (postPS == 1)			{				posteriors[site_enumerator] = 1e25;			}			else			{				postPS	   = postPS/(1-postPS)/priorPS;				posteriors[site_enumerator] = postPS;			}		}	}	else	{		if (allNeg == 0)		{			posteriors[site_enumerator] = 0;		}		else		{			posteriors[site_enumerator] = 1;		}	}}