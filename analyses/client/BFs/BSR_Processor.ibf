ExecuteAFile ("../Shared/OutputsBSR.bf");/*---------------------------------------------------------------*/_CheckDBID (slacDBID,"BSR_RESULTS",BSR_ResultTable);record = {};fields = Rows(BSR_ResultTable);fc     = Columns(fields);sscanf (rawIn,"Tree,NMatrix,Raw", givenTree, pValueByBranch, fitNEXUS);fileOut = BASE_OUTPUT_PATH + filePrefix + "_bsr.nex";fprintf (fileOut, CLEAR_FILE, fitNEXUS);//------------------------------------------------------------------------------------------------------------------------function makeDNDSColor (omega){	if (omega < 1)	{		return {{0.5*omega__,0.5*omega__,1-0.5*omega__}};	}	omega = Min (omega,5);	return {{0.5+0.125*(omega__-1),0.5-(omega__-1)*0.125,0.5-(omega__-1)*0.125}};}//------------------------------------------------------------------------------------------------------------------------totalBranchCount = BranchCount(givenTree) + TipCount (givenTree);bNames = BranchName (givenTree, -1);		fprintf (stdout, "<script type='text/javascript' src='http://www.datamonkey.org/wz_tooltip.js'></script><H1 CLASS='SuccessCap'>Branch-site REL analysis results</H1>");jobFileName = BASE_CGI_URL_STRING + "slacreport.pl?file=" + filePrefix + "&task=8&format=";fprintf (stdout, "<DIV CLASS='RepClassCT'><b>Reports</b> <a href='",jobFileName,"0'>[HTML]</a> <a href='",jobFileName,"1'>[CSV]</a> <a href='",filePrefix,"_bsr.nex'>[NEXUS]</a></DIV>");fprintf (stdout, _makeJobIDHTML(filePrefix),_makeSimpleDataDescription(slacDBID));pValueSorter = {totalBranchCount,2};pValueSorter = pValueSorter["_MATRIX_ELEMENT_ROW_*(_MATRIX_ELEMENT_COLUMN_==0)+pValueByBranch[_MATRIX_ELEMENT_ROW_][8]*(_MATRIX_ELEMENT_COLUMN_==1)"];pValueSorter = pValueSorter % 1;pValueSorter = pValueSorter["_MATRIX_ELEMENT_VALUE_*(_MATRIX_ELEMENT_COLUMN_==0)+_MATRIX_ELEMENT_VALUE_*(totalBranchCount-_MATRIX_ELEMENT_ROW_)*(_MATRIX_ELEMENT_COLUMN_==1)"];hasBranchesUnderSelection = 0;pthreshold = 0.05;branchesUnderSelection = {};fprintf (stdout, "<DIV CLASS='RepClassSM'><b>Summary of episodic diversifying selection analysis</b><p>");for		(k = 0; k < totalBranchCount; k = k+1){	record = {"branch" : bNames[k]};	for (m = 1; m < fc; m+=1)	{		record[fields[m]] = pValueByBranch[k][m-1];	}	_InsertRecord (slacDBID, "BSR_RESULTS", record);			pValueByBranch[pValueSorter[k][0]][9] = Min (1,pValueSorter[k][1]);	if (pValueSorter[k][1] <= pthreshold)	{		myPValue = pValueByBranch[pValueSorter[k][0]][9];		if (myPValue < 0.0001)		{			myPValue = "&lt; 0.0001";		}		else		{			myPValue = Format (myPValue, 5, 3);		}		branchesUnderSelection[bNames[pValueSorter[k][0]]] = {"0": myPValue,															  "1": Format(pValueByBranch[pValueSorter[k][0]][5],5,2),															  "2": Format(pValueByBranch[pValueSorter[k][0]][6],5,2)};		hasBranchesUnderSelection += 1;	}}//tree output TREE_OUTPUT_OPTIONS = {"__FONT_SIZE__":14};tavl = givenTree^0;for (k = 1; k < Abs (tavl)-1; k+=1){	TREE_OUTPUT_OPTIONS[(tavl[k])["Name"]] = {};}for (k = 1; k < Abs (tavl)-1; k+=1){	thisP = (pValueByBranch)[k-1][9];		parentName = (tavl[((tavl[k])["Parent"])])["Name"];		myRateDistro = {3,2};	myRateDistro [0][0] = (pValueByBranch)[k-1][1];	myRateDistro [0][1] = (pValueByBranch)[k-1][2];	myRateDistro [1][0] = (pValueByBranch)[k-1][3];	myRateDistro [1][1] = (pValueByBranch)[k-1][4];	myRateDistro [2][0] = (pValueByBranch)[k-1][5];	myRateDistro [2][1] = (pValueByBranch)[k-1][6];		myRateDistro = myRateDistro % 0;		color1 = makeDNDSColor (myRateDistro[0][0]);	color2 = makeDNDSColor (myRateDistro[1][0]);	color3 = makeDNDSColor (myRateDistro[2][0]);		(TREE_OUTPUT_OPTIONS[(tavl[k])["Name"]])["TREE_OUTPUT_BRANCH_COLOR"] 		= {{color1__[0],color1__[1],color1__[2],myRateDistro__[0][1]}																				   {color2__[0],color2__[1],color2__[2],myRateDistro__[1][1]}																				   {color3__[0],color3__[1],color3__[2],myRateDistro__[2][1]}};	(TREE_OUTPUT_OPTIONS[(tavl[k])["Name"]])["TREE_OUTPUT_BRANCH_LINECAP"]  = 	0;		if (thisP <= 0.05)	{		(TREE_OUTPUT_OPTIONS[(tavl[k])["Name"]])["TREE_OUTPUT_BRANCH_THICKNESS"] = 	14;	}	if (Abs((tavl[k])["Children"]) > 0)	{		(TREE_OUTPUT_OPTIONS[(tavl[k])["Name"]])["TREE_OUTPUT_BRANCH_TLABEL"] = (tavl[k])["Name"]; 	}}height = TipCount (givenTree) * 36;psTree = PSTreeString (givenTree,"STRING_SUPPLIED_LENGTHS",{{640,height}});treePath			= BASE_OUTPUT_PATH + filePrefix + "_" + suffix[kind] + ".tree.ps";treeLink			= BASE_HTML_URL_STRING + filePrefix + "_" + suffix[kind] + ".tree.png"; fprintf (treePath, CLEAR_FILE, psTree);// end tree outputif (hasBranchesUnderSelection == 0){	fprintf (stdout, "No branches found to be under episodic diversifying selection at p <= ", pthreshold, ".");}else{	fprintf (stdout, "Found <b>",hasBranchesUnderSelection,"</b> branches under episodic diversifying selection at p &le; ", pthreshold, ".<br>");	echoAVLAsTable (branchesUnderSelection, {"0":toolTipCode("Branch TOOLTIP","The name of the branch (see a plot below)"), 											 "1":toolTipCode("Corrected p-value TOOLTIP","The p-value for episodic selection at this branch <br>corrected for multiple testing using the Holm-Bonferroni method"), 											 "2":toolTipCode("&omega;<sup>+</sup> TOOLTIP","The &omega; value inferred for positively selected sites along this branch <br> (see reports for the full rate distribution)"), 											 "3":toolTipCode("Pr [&omega;=&omega;<sup>+</sup>] TOOLTIP","The proportion of sites inferred to be evolving at &omega;<sup>+</sup> along this branch")}											 , 1, 0, 12);}fprintf (stdout, "<DIV CLASS = 'HelpfulTips'>For more information use the 'Reports' links above</DIV></DIV>");fprintf (stdout, "\n<DIV CLASS = 'RepClassSM' style = 'max-width: 100%'>The phylogenetic tree scaled on the expected number of substitutions / nucleotide. ",				 "[Get a <a href = '",BASE_CGI_URL_STRING + "/renderPSImage.pl?file="+filePrefix + "_" + suffix[kind] + ".tree&doPDF=1'>.pdf</a> version]",				 "<DIV CLASS = 'HelpfulTips'>The hue of each color indicates strength of selection, with primary red corresponding to &omega; &gt; 5, primary blue to &omega; = 0 and grey to &omega;=1. ", 				 "The width of each color component represents the proportion of sites in the corresponding class. Thicker branches have been classified as undergoing episodic diversifying selection by the sequential likelihood ratio test at corrected p &le; ", pthreshold, "</DIV>",				 "\n<p><IMG BORDER='2' WIDTH = '655' HEIGHT = '",height+15,"' ALT = 'Tree Image' SRC = '",treeLink ,"'></DIV>");