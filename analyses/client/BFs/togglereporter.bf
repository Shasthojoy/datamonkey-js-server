/* only using output options 0 and 1 for now: 0 = HTML, 1 = CSV. can add plots later*/ExecuteAFile("../Shared/HyPhyGlobals.ibf");ExecuteAFile("../Shared/GrabBag.bf");fscanf		(stdin,"String", filePrefix);fscanf		(stdin,"Number", optionOutput); /* ________________________________________________________________________________________________*/function ErrorOut (errString){	fprintf (stdout, "ERROR:<DIV class = 'ErrorTagSM'>\n", errString, "\n</DIV>");	return 0;}/* ________________________________________________________________________________________________*/if (optionOutput!=2){	ExecuteAFile	("../Shared/DBTools.ibf");	slacDBID 		 = _openCacheDB      (filePrefix);	pv = _ExecuteSQL  (slacDBID,"SELECT COL_VALUE FROM TOGGLE_SUMMARY WHERE COL_KEY = 'PValue'");	pv = 0+pv[0];	ExecuteAFile 			("../Shared/OutputsToggle.bf");	tableKeys = Rows		(Toggle_ResultTable);}if (optionOutput < 2){	generalInfo = _ExecuteSQL  (slacDBID,"SELECT * FROM TOGGLE_RESULTS ORDER BY Codon");		titleMatrix 	= {1,13};	titleMatrix[0]  = "Codon";	titleMatrix[1]  = "AA";	titleMatrix[2]  = "Res";	titleMatrix[3]  = "Log(L)n";	titleMatrix[4]  = "Log(L)a";	titleMatrix[5]  = "LRT";	titleMatrix[6]  = "p_value";	titleMatrix[7]  = "dN/dS";	titleMatrix[8]  = "Toggle_rate";	titleMatrix[9]  = "Tv/Ti";	titleMatrix[10]  = "T_wt";	titleMatrix[11]  = "T_1";	titleMatrix[12]  = "T_m";		rowCount  = Abs	   		(generalInfo);	colCount  = Abs	        (Toggle_ResultTable);		toggleInfo = {rowCount, colCount};		for (r=0; r<rowCount; r=r+1)	{		for (c=0; c<colCount; c=c+1)		{			toggleInfo[r][c] = 0+(generalInfo[r])[tableKeys[c]]; 		}	}		/*sort by sites*/	toggleInfo = toggleInfo % 0;	sortedToggleInfo = { rowCount, colCount};		sidx = 0;	sidx2 = 0;	numSites = rowCount/20;	for ( si = 0; si < numSites; si = si + 1 ) {		tempMatrix = {20, colCount};		for ( sr = 0; sr < 20; sr = sr + 1 ) {			for ( sc = 0; sc < colCount; sc = sc + 1 ) {				tempMatrix [ sr ][ sc ] = toggleInfo [sidx2][sc];			}			sidx2 = sidx2 + 1;		}		tempMatrix = tempMatrix % 1;		for ( sr = 0; sr < 20; sr = sr + 1 ) {			for ( sc = 0; sc < colCount; sc = sc + 1 ) {				sortedToggleInfo [ sidx ][ sc ] = tempMatrix[ sr ][ sc ];			}			sidx = sidx + 1;		}	}		toggleInfo = sortedToggleInfo;				if (optionOutput == 1) /* CSV */	{		fprintf (stdout, titleMatrix[0] );		for (r=1; r<Columns(titleMatrix); r=r+1)		{			fprintf (stdout, ",", titleMatrix[r]);		}				for (r=0; r<rowCount; r=r+1)		{			fprintf (stdout, "\n", toggleInfo[r][0], ",", aminoacidOrdering[ 0 + toggleInfo[r][1] ], ",", residueMap[ 0 + toggleInfo[r][1] ] );			for (c=2; c<colCount; c=c+1)			{				fprintf (stdout, ",", toggleInfo[r][c]);				}		}	}	else /* HTML */	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Detailed Toggle results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<DIV CLASS = 'RepClassSM'>Detailed analysis results (see legend at the bottom of the page)");				fprintf (stdout, "<TABLE BORDER = '0' style = 'margin:10px'><TR class = 'TRReportT'>");		for (r=0; r< Columns(titleMatrix); r=r+1)		{			fprintf (stdout, "<TD>", titleMatrix[r], "</TD>");		}		fprintf (stdout, "</TR>\n");		for (r=0; r<rowCount; r=r+1)		{			trClass = "TRReportNT";			if ( toggleInfo[r][5] <= pv/20 ) {				trClass = "TRReportPS";				}			fprintf (stdout, "<TR class = '",trClass,"' style = 'font-size:9px;'>");			fprintf (stdout, "<TD>", toggleInfo[r][0], "</TD>", "<TD>", aminoacidOrdering[0 + toggleInfo[r][1] ], "</TD>", "<TD>", residueMap[ 0 + toggleInfo[r][1] ], "</TD>");			for (c=2; c<colCount; c=c+1)			{				if (toggleInfo[r][c]$1 != toggleInfo[r][c])				{					fprintf (stdout, "<TD>", Format (toggleInfo[r][c],5,2), "</TD>");				}				else				{					fprintf (stdout, "<TD>", toggleInfo[r][c], "</TD>");								}			}			fprintf (stdout, "</TR>\n");		}		fprintf (stdout, "</TABLE>");				fscanf ("../Formats/toggle_report","Raw",toggle_Legend);		fprintf (stdout, toggle_Legend);		fprintf (stdout, "</DIV>");	}}if (optionOutput!=2){	_closeCacheDB (slacDBID);}