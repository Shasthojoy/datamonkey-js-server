ExecuteAFile ("../Shared/OutputsMEME.bf");ExecuteAFile ("../Shared/ReadDelimitedFiles.bf");sscanf (rawIn,"Number,NMatrix,Number,NMatrix,Raw",p_value,treeLengths,treeMode,MEME_result_matrix,MEME_branch_data);_CheckDBID (slacDBID,   "MEME_RESULTS",     MEME_ResultTable);_CheckDBID (slacDBID,   "MEME_MAPPINGS",    MEME_TreesTable);record = {};fields = Rows(MEME_ResultTable);fc     = Columns(fields);treeLengthArray = {};treeCount = Rows(treeLengths);MEME_trees_for_plotting = {treeCount, 1};for (r = 0; r < treeCount; r += 1){	treeLengthArray[r+1]        = treeLengths[r];	sscanf (MEME_branch_data, "String", tStr);	MEME_trees_for_plotting     [r] = tStr;}sscanf (MEME_branch_data, "Lines", branchData);record = {};for (lineEntry = 2; lineEntry < Columns (branchData); lineEntry += 1) {    lineInfo = splitOnRegExp (branchData[lineEntry], ",");    if (Abs (lineInfo) == Columns (MEME_tree_result_ordering))    {        for (recID = 0; recID < Abs (lineInfo); recID += 1) {            record[MEME_tree_result_ordering[recID]] = lineInfo[recID];        }	    _InsertRecord (slacDBID,"MEME_MAPPINGS", record);    }}_sites_with_maps = ListOfSitesWithMappingData(slacDBID);posSelected = 0;p   		= Rows(MEME_result_matrix);upperBounds = _ExecuteSQL (slacDBID,"SELECT EndCodon FROM FILE_PARTITION_INFO ORDER BY PARTITION");for (r = 0; r < Abs(upperBounds); r=r+1) {	upperBounds[r] = 0+upperBounds[r];}currentP = 0;record = {};for (r = 0; r < p; r=r+1){	record["Codon"] = r+1;	for (c=1; c < fc; c=c+1)	{		record[fields[c]] = MEME_result_matrix[r][c-1];	}	if (r > upperBounds[currentP])	{		currentP += 1;	}	_InsertRecord (slacDBID,"MEME_RESULTS", record);	posSelected += (MEME_result_matrix[r][2] > MEME_result_matrix[r][4] && MEME_result_matrix[r][6] <= p_value);}MEME_SummaryTable = {};MEME_SummaryTable ["COL_KEY"] 	 = "STRING";MEME_SummaryTable ["COL_VALUE"]  = "STRING";_CheckDBID 		  (slacDBID,"MEME_SUMMARY",MEME_SummaryTable);record = {};record ["COL_KEY"] = "PValue";record ["COL_VALUE"] = p_value;_InsertRecord (slacDBID,"MEME_SUMMARY", record);record ["COL_KEY"] = "TreeLengths";record ["COL_VALUE"] = ""+treeLengths;_InsertRecord (slacDBID,"MEME_SUMMARY", record);record ["COL_KEY"] = "PosSel";record ["COL_VALUE"] = posSelected;_InsertRecord (slacDBID,"MEME_SUMMARY", record);record ["COL_KEY"] = "TreeMode";record ["COL_VALUE"] = treeMode;_InsertRecord (slacDBID,"MEME_SUMMARY", record);for (r = 1; r <= treeCount; r += 1){    record ["COL_KEY"] = "RenderTree" + r;record ["COL_VALUE"] = MEME_trees_for_plotting[r-1];_InsertRecord (slacDBID,"MEME_SUMMARY", record);}fprintf (stdout, "<H1 CLASS='SuccessCap'>MEME analysis results</H1>");jobFileName = BASE_CGI_URL_STRING + "slacreport.pl?file=" + filePrefix + "&task=12&format=";fprintf (stdout, "<DIV CLASS='RepClassCT'><b>Reports</b> <a href='",jobFileName,"0'>[HTML]</a> <a href='",			        jobFileName,"1' target = '_blank'>[CSV]</a> <a href='",jobFileName,"2",			        "'>[Plots]</a></DIV>");			        fprintf (stdout, _makeJobIDHTML(filePrefix), 				 _makeDataDescriptionTM (slacDBID,treeMode, treeLengthArray));doSLACM = _TableExists (slacDBID, "SLAC_SUMMARY");if (doSLACM){	slacTM = _ExecuteSQL (slacDBID,"SELECT COL_VALUE FROM SLAC_SUMMARY WHERE COL_KEY = 'TreeMode'");	if (Abs(slacTM))	{		if ((0+(slacTM[0])) == treeMode)		{			doSLACM = 1;		}		else		{			doSLACM = 0;		}	}}keyMap  = {{"Codon","alpha","beta1","p1","beta2","p2","pvalue","qvalue"}};if (posSelected){				_res = _ExecuteSQL (slacDBID, "SELECT Codon,alpha,beta1,p1,beta2,p2,pvalue,qvalue FROM MEME_RESULTS WHERE (beta2 > alpha AND pvalue<="+p_value+") ORDER BY Codon");	selMx = AVL2Matrix (_res, keyMap);			fprintf (stdout, "<DIV CLASS='RepClassSM'><form action='",BASE_CGI_URL_STRING,"slacpvalue.pl' method = 'GET'>Found <b>",posSelected,					   "</b> sites with evidence of episodic diversifying selection (<input type = 'hidden' name = 'file' value = '",					   filePrefix,"'><input type = 'text' name = 'pvalue' value = '",					   p_value,					   "' size = '5'> significance level <input type = 'hidden' value = '12' name = 'task'><input type = 'submit' value = 'Retabulate'>)<p>",					   "<DIV CLASS = 'HelpfulTips'>This summary table reports the distribution of synonymous (&alpha;) and non-synonymous (&beta;) substitution rates over <b>sites</b> inferred by the MEME model, where the proportion of branches with &beta;&gt;&alpha; is significantly greater than 0. p-value is derived using a mixture of &chi;<sup>2</sup> distributions, and q-values are obtained using <a href = 'http://en.wikipedia.org/wiki/False_discovery_rate#Independent_tests' class = 'REFERENCE'>Simes' procedure</a>, which controls the false discovery rate under the strict neutral null (likely to be conservative).</DIV>",					   PrintASCIITable  (selMx, selLabelMatrix,doSLACM, _sites_with_maps),"</form></DIV>");}else{	fprintf (stdout, "<DIV CLASS='RepClassSM'><form action='",BASE_CGI_URL_STRING,"slacpvalue.pl' method = 'GET'>Found no sites with evidence of episodic diversifying selection (<input type = 'hidden' name = 'file' value = '",					  filePrefix,"'><input type = 'text' name = 'pvalue' value = '",					   p_value,					   "' size = '5'> significance level <input type = 'hidden' value = '12' name = 'task'><input type = 'submit' value = 'Retabulate'>)</form></DIV>");}		