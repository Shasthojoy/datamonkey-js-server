ExecuteAFile("../Shared/HyPhyGlobals.ibf");ExecuteAFile("../Shared/GrabBag.bf");fscanf		(stdin,"String", filePrefix);fscanf		(stdin,"Number", optionOutput);if (optionOutput >= 4){	fscanf		(stdin,"String", gnuplotFormat);	fscanf		(stdin,"String", style);	fscanf		(stdin,"String", xaxis);	fscanf		(stdin,"String", yaxis);	fscanf		(stdin,"String", size);} /* ________________________________________________________________________________________________*/function ErrorOut (errString){	fprintf (stdout, "ERROR:<DIV class = 'ErrorTagSM'>\n", errString, "\n</DIV>");	return 0;}/* ________________________________________________________________________________________________*/if (optionOutput!=2){	ExecuteAFile	("../Shared/DBTools.ibf");	slacDBID 		 = _openCacheDB      (filePrefix);	pv = _ExecuteSQL  (slacDBID,"SELECT COL_VALUE FROM REL_SUMMARY WHERE COL_KEY = 'BF'");	pv = 0+pv[0];	ExecuteAFile 			("../Shared/OutputsREL.bf");	tableKeys = Rows		(REL_ResultTable);}if (optionOutput < 2){	generalInfo = _ExecuteSQL  (slacDBID,"SELECT * FROM REL_RESULTS ORDER BY Codon");		titleMatrix 	= {1,8};	titleMatrix[0]  = "Codon";	titleMatrix[1]  = "E[dS]";	titleMatrix[2]  = "E[dN]";	titleMatrix[3]  = "E[dN-dS]";	if (optionOutput == 0)	{		titleMatrix[4]  = "Posterior Pr{dN&gt;dS}";		titleMatrix[5]  = "Bayes Factor {dN&gt;dS}";		titleMatrix[6]  = "Posterior Pr{dN&lt;dS}";		titleMatrix[7]  = "Bayes Factor {dN&lt;dS}";	}	else	{		titleMatrix[4]  = "Posterior Pr{dN>dS}";		titleMatrix[5]  = "Bayes Factor {dN>dS}";		titleMatrix[6]  = "Posterior Pr{dN<dS}";		titleMatrix[7]  = "Bayes Factor {dN<dS}";		}	rowCount  = Abs	   		(generalInfo);	colCount  = Abs	        (REL_ResultTable);			colMap	  = {{0,1,2,3,4,6,5,7}};	relInfo = {rowCount, colCount};		for (r=0; r<rowCount; r=r+1)	{		for (c=0; c<colCount; c=c+1)		{			relInfo[r][c] = 0+(generalInfo[r])[tableKeys[c]]; 		}	}	relInfo = relInfo % 0;		if (optionOutput == 1) /* CSV */	{		fprintf (stdout, titleMatrix[0]);		for (r=1; r<colCount; r=r+1)		{			fprintf (stdout, ",", titleMatrix[r]);		}				for (r=0; r<rowCount; r=r+1)		{			fprintf (stdout, "\n", relInfo[r][colMap[0]]);			for (c=1; c<colCount; c=c+1)			{				fprintf (stdout, ",", relInfo[r][colMap[c]]);			}		}	}	else	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Detailed REL results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<DIV CLASS = 'RepClassSM'>Detailed analysis results (see legend at the bottom of the page)");						fprintf (stdout, "<TABLE BORDER = '0' style = 'margin:10px'><TR class = 'TRReportT'>");		for (r=0; r<colCount; r=r+1)		{			fprintf (stdout, "<TD>", titleMatrix[r], "</TD>");		}		fprintf (stdout, "</TR>\n");		for (r=0; r<rowCount; r=r+1)		{			trClass = "TRReportNT";			if (relInfo[r][colCount-2]>=pv)			{				trClass = "TRReportPS";						}			if (relInfo[r][colCount-1]>=pv)			{				trClass = "TRReportNS";						}			fprintf (stdout, "<TR class = '",trClass,"' style = 'font-size:9px;'>");			fprintf (stdout, "<TD>", relInfo[r][0],"</TD>");			for (c=1; c<colCount; c=c+1)			{				if (relInfo[r][colMap[c]]$1 != relInfo[r][colMap[c]])				{					fprintf (stdout, "<TD>", Format (relInfo[r][colMap[c]],5,2), "</TD>");				}				else				{					fprintf (stdout, "<TD>", relInfo[r][colMap[c]], "</TD>");								}			}			fprintf (stdout, "</TR>\n");		}		fprintf (stdout, "</TABLE>");						fscanf ("../Formats/rel_report","Raw",fel_Legend);		fprintf (stdout, fel_Legend);		fprintf (stdout, "</DIV>");	}}else{	if (optionOutput == 2)	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Generate selection plots from REL results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<FORM method='POST' name = 'plotForm' enctype='multipart/form-data' action='",BASE_CGI_URL_STRING,"rungnuplot.pl' target = '_blank'>\n<input type = 'hidden' value = '",filePrefix,"' name = 'inFile'><input type = 'hidden' value = '3' name = 'task'>");		fscanf  ("../Formats/relplot","Raw",relplot);		fprintf (stdout, relplot, "</form>");	}	else	{		fprintf (stdout, "set term ", gnuplotFormat);		if (gnuplotFormat == "png")		{			fprintf (stdout, " ", size);		}		fprintf (stdout, "\nset output\nset nokey\nset xlabel '", xaxis, "'\nset ylabel '",yaxis, "'\nplot '-' lt -1 with ",style,"\n");		pv = _ExecuteSQL  (slacDBID,"SELECT "+ tableKeys[optionOutput-4] +" FROM REL_RESULTS ORDER BY Codon");		if (optionOutput == 10 || optionOutput == 11)		{			for (k=0; k<Abs(pv); k=k+1)			{				fprintf (stdout, "\n", k+1, "\t", Log(0+pv[k]));			}				}		else		{			for (k=0; k<Abs(pv); k=k+1)			{				fprintf (stdout, "\n", k+1, "\t", pv[k]);			}		}	}}if (optionOutput!=2){	_closeCacheDB (slacDBID);}