/* 1. fit nucleotide model */	fprintf (intermediateHTML, jobIDDIV, "<DIV class = 'RepClassSM'>This page will automatically referesh in <b>10</b> seconds</DIV><DIV class = 'RepClassSM'><b>Phase 1</b> Nucleotide model (",ModelTitle,") fit<br>\n");	for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)	{		ExecuteCommands ("Tree nucTree_" + fileID + "=" + treeStrings[fileID] + ";");	}	ExecuteCommands  (constructLF("nucLF", "nucData", "nucTree", fileCount));	Optimize 		 (nuc_res,nucLF);	fprintf (intermediateHTML, "LogL = ",Format(nuc_res[1][0],10,3), "</DIV>\n");/* 2. fit codon model */	if (_in_GeneticCodeTable >= 0)	{ 		fprintf (intermediateHTML, "<DIV class = 'RepClassSM'><b>Phase 2</b> Codon model (MG94x",ModelTitle,") fit<br>\n");		CodonMatrix = {ModelMatrixDimension,ModelMatrixDimension};		rateMultipliers 		= {{""   ,"AC__*",""   ,"AT__*"}								   {"AC__*",""   ,"CG__*","CT__*"}								   {""   ,"CG__*",""   ,"GT__*"}								   {"AT__*","CT__*","GT__*","" }								  };		modelDefString = "";		modelDefString*16384;		hshift = 0;		for (h=0; h<64; h=h+1)		{			if (_Genetic_Code[h]==10) 			{				hshift = hshift+1;				continue; 			}			vshift = hshift;			for (v = h+1; v<64; v=v+1)			{				diff = v-h;				if (_Genetic_Code[v]==10) 				{					vshift = vshift+1;					continue; 				}				nucPosInCodon = 2;				if ((h$4==v$4)||((diff%4==0)&&(h$16==v$16))||(diff%16==0))				{					if (h$4==v$4)					{						transition = v%4;						transition2= h%4;					}					else					{						if(diff%16==0)						{							transition = v$16;							transition2= h$16;							nucPosInCodon = 0;						}						else						{							transition = v%16$4;							transition2= h%16$4;							nucPosInCodon = 1;						}					}					hs = Format(h-hshift,0,0);					vs = Format(v-vshift,0,0);					ts = Format(transition,0,0);					ts2= Format(transition2,0,0);					ps = Format(nucPosInCodon,0,0);					aa1 = _Genetic_Code[0][h];					aa2 = _Genetic_Code[0][v];										if (aa1==aa2) 					{						modelDefString*("CodonMatrix["+hs+"]["+vs+"] := synRate*"+rateMultipliers[transition][transition2]+"positionFrequencies__["+ts+"]["+ps+"];\n"+										"CodonMatrix["+vs+"]["+hs+"] := synRate*"+rateMultipliers[transition][transition2]+"positionFrequencies__["+ts2+"]["+ps+"];\n");					}					else					{						modelDefString*("CodonMatrix["+hs+"]["+vs+"] := dNdS*synRate*"+rateMultipliers[transition][transition2]+"positionFrequencies__["+ts+"]["+ps+"];\n"+										"CodonMatrix["+vs+"]["+hs+"] := dNdS*synRate*"+rateMultipliers[transition][transition2]+"positionFrequencies__["+ts2+"]["+ps+"];\n");					}				}		    }	    }				modelDefString*0;		ExecuteCommands (modelDefString);				Model MGModel   = (CodonMatrix,codonFrequencies,0);		for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)		{			ExecuteCommands ("Tree codonTree_" + fileID + "=" + treeStrings[fileID] + ";");		}		/* compute the branch conversion factor */				synRate 	= 1;		t 	  		= 1;		if			(rOptions != 1)		{			dNdS		= 1;		}				blCodon = 0;		for (h=0; h<ModelMatrixDimension; h=h+1)		{			blCodon = blCodon - CodonMatrix[h][h]*codonFrequencies[h];		}		blNuc = 0;		t 	  = 1;		for  (h=0; h<4; h=h+1)		{			blCodon2 = 0;			for (v=0; v<4; v=v+1)			{				if (h!=v)				{					blCodon2 = blCodon2 + NucleotideMatrix[h][v]*overallFrequencies[v];				}			}			blNuc = blNuc + overallFrequencies[h]*blCodon2;		}		ExecuteCommands (constructLF("lf", "filteredData", "codonTree", fileCount));				if (rOptions>=2)		/* going to estimate dN/dS */		{			global rConstr 		= 1;			blCodon2 	   		= 0;			dNdS 		   		= 2;			for (h=0; h<ModelMatrixDimension; h=h+1)			{				blCodon2 = blCodon2 - CodonMatrix[h][h]*codonFrequencies[h];			}						blCodon2 = blCodon2-blCodon;			blCodon  = blCodon-blCodon2;						dNdS = 0.25;						global 	   rConstr = 3*blNuc/(blCodon+dNdS*blCodon2);			rConstr    :> 0;						for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)			{				ExecuteCommands ("ReplicateConstraint(\"this1.?.synRate:=rConstr*this2.?.t__\",codonTree_"+fileID+",nucTree_"+fileID+")");			}			if (rOptions == 4)			{				rConstr := 3*blNuc__/(blCodon__+dNdS*blCodon2__);			}						SKIP_CONJUGATE_GRADIENT = 1;			Optimize 				 (resC,lf);			SKIP_CONJUGATE_GRADIENT = 0;			if (rOptions == 3)			{				COVARIANCE_PRECISION = 0.95;				ClearConstraints(codonTree);				for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)				{					ExecuteCommands("ReplicateConstraint(\"this1.?.synRate:=rConstr__*this2.?.t__\",codonTree_"+fileID+",nucTree_"+fileID+")");				}				savedNdS 				= dNdS;				COVARIANCE_PARAMETER 	= "dNdS";				CovarianceMatrix 		(dNdS_CovarianceMatrix, lf);					dNdS 					= savedNdS;				COVARIANCE_PARAMETER 	= 0;			}		}		else		{			blNuc = 3*blNuc/blCodon;			dNdS := dNdS__;			for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)			{				ExecuteCommands("ReplicateConstraint(\"this1.?.synRate:=this2.?.t__*blNuc__\",codonTree_"+fileID+",nucTree_"+fileID+")");			}		}				LFCompute (lf,LF_START_COMPUTE);		LFCompute (lf,codon_LL);		LFCompute (lf,LF_DONE_COMPUTE);		fprintf (intermediateHTML, "LogL = ",Format(codon_LL,10,3), "<br>dN/dS = ", Format(dNdS,10,3), "</DIV>\n");	}		