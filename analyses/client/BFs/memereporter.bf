ExecuteAFile("../Shared/HyPhyGlobals.ibf");ExecuteAFile("../Shared/GrabBag.bf");fscanf		(stdin,"String", filePrefix);fscanf		(stdin,"Number", optionOutput);if (optionOutput >= 4){	fscanf		(stdin,"String", gnuplotFormat);	fscanf		(stdin,"String", style);	fscanf		(stdin,"String", xaxis);	fscanf		(stdin,"String", yaxis);	fscanf		(stdin,"String", size);} /* ________________________________________________________________________________________________*/function ErrorOut (errString){	fprintf (stdout, "ERROR:<DIV class = 'ErrorTagSM'>\n", errString, "\n</DIV>");	return 0;}/* ________________________________________________________________________________________________*/if (optionOutput!=2){	ExecuteAFile	("../Shared/DBTools.ibf");	slacDBID 		 = _openCacheDB      (filePrefix);	pv = _ExecuteSQL  (slacDBID,"SELECT COL_VALUE FROM MEME_SUMMARY WHERE COL_KEY = 'PValue'");	pv = 0+pv[0];	ExecuteAFile 			("../Shared/OutputsMEME.bf");	tableKeys = Rows		(MEME_ResultTable);}if (optionOutput < 2){	memeInfo 		= _ExecuteSQL  (slacDBID,"SELECT * FROM MEME_RESULTS ORDER BY CODON");	titleMatrix 	= {1,10};		rowCount  = Abs	   		(memeInfo);	colCount  = Abs	        (MEME_ResultTable);	headers	  = Rows		(MEME_ResultTable);		colMap	  = {{0,5,1,2,3,4,6,7,9,8}};	if (optionOutput == 1) /* CSV */	{		titleMatrix[0]  = "Codon";		titleMatrix[1]  = "alpha";		titleMatrix[2]  = "beta1";		titleMatrix[3]  = "p1";		titleMatrix[4]  = "beta2";		titleMatrix[5]  = "p2";		titleMatrix[6]  = "LRT";		titleMatrix[7]  = "p-value";		titleMatrix[8]  = "q-value";		titleMatrix[9]  = "Log(L)";		fprintf (stdout, Join (",", titleMatrix), "\n");				for (r=0; r<rowCount; r=r+1)		{			matrixInfo = {1,colCount};			for (c = 0; c < colCount; c+=1)			{				matrixInfo[c] = (memeInfo[r])[headers[colMap[c]]];			}			fprintf (stdout, Join (",", matrixInfo), "\n");		}	}	else	{		titleMatrix[0]  = "Codon";		titleMatrix[1]  = "&alpha;";		titleMatrix[2]  = "&beta;<sup>-</sup>";		titleMatrix[3]  = "Pr[&beta;=&beta;<sup>-</sup>]";		titleMatrix[4]  = "&beta;<sup>+</sup>";		titleMatrix[5]  = "Pr[&beta;=&beta;<sup>+</sup>]";		titleMatrix[6]  = "LRT";		titleMatrix[7]  = "p-value";		titleMatrix[8]  = "q-value";		titleMatrix[9]  = "Log(L)";		fprintf (stdout, "<script type='text/javascript' src='http://www.datamonkey.org/wz_tooltip.js'></script>\n<H1 CLASS = 'SuccessCap'>Detailed MEME results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<DIV CLASS = 'RepClassSM'>");				fprintf (stdout, "<b>Inferred site-specific distributions of branch-wise &alpha; and &beta; and LRT test results for evidence of episodic diversifying selection (EDS) at each site.</b>",		"<p/> <TABLE BORDER = '0' style = 'margin:10px'><TR class = 'TRReportT' style = 'font-size:14px';><TD>");		fprintf (stdout, Join ("</TD><TD>", titleMatrix), "</TD></TR>\n");		for (r=0; r<rowCount; r=r+1)		{			trClass = "TRReportNT";						if (0 + (memeInfo[r])["pvalue"] <= 0.05 && 0 + (memeInfo[r])["beta2"] > 0 + (memeInfo[r])["alpha"])			{				trClass = "TRReportPS";						}						matrixInfo = {1,colCount};			matrixInfo[0] = (memeInfo[r])[headers[colMap[0]]];			for (c = 1; c < colCount; c+=1)			{				matrixInfo[c] = normalizeNumber((memeInfo[r])[headers[colMap[c]]]);			}			fprintf (stdout, "<TR class = '",trClass,"' style = 'font-size:12px;'><TD>",Join ("</TD><TD>", matrixInfo),"</TD></TR>\n");		}				fprintf (stdout, "</TABLE>");						fscanf ("../Formats/meme_report","Raw",meme_Legend);		fprintf (stdout, meme_Legend);		fprintf (stdout, "</DIV>");	}}else{	if (optionOutput == 2)	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Generate selection plots from MEME results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<FORM method='POST' name = 'plotForm' enctype='multipart/form-data' action='",BASE_CGI_URL_STRING,"rungnuplot.pl' target = '_blank'>\n<input type = 'hidden' value = '",filePrefix,"' name = 'inFile'><input type = 'hidden' value = '12' name = 'task'>");		fscanf  ("../Formats/memeplot","Raw",felplot);		fprintf (stdout, felplot, "</form>");	}	else	{		fprintf (stdout, "set term ", gnuplotFormat);		if (gnuplotFormat == "png")		{			fprintf (stdout, " ", size);		}		fprintf (stdout, "\nset output\nset nokey\nset xlabel '", xaxis, "'\nset ylabel '",yaxis, "'\nplot '-' lt -1 with ",style,"\n");		pv = _ExecuteSQL  (slacDBID,"SELECT "+ tableKeys[optionOutput-4] +" FROM MEME_RESULTS ORDER BY Codon");		if (optionOutput == 11)		{			for (k=0; k<Abs(pv); k+=1)			{				fprintf (stdout, "\n", k+1, "\t", Max(-100,Min(0+pv[k],100)));			}				}		else		{			for (k=0; k<Abs(pv); k+=1)			{				fprintf (stdout, "\n", k+1, "\t", pv[k]);			}		}	}}if (optionOutput!=2){	_closeCacheDB (slacDBID);}function normalizeNumber (n){	n = 0+n;	if (n > 0 && n < 0.0001)	{		return "&lt;0.0001";	}	return Format (n,4,2);}