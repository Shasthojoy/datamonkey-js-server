ExecuteAFile("../Shared/HyPhyGlobals.ibf");ExecuteAFile("../Shared/GrabBag.bf");fscanf		(stdin,"String", filePrefix);fscanf		(stdin,"Number", optionOutput);if (optionOutput >= 4){	fscanf		(stdin,"String", gnuplotFormat);	fscanf		(stdin,"String", style);	fscanf		(stdin,"String", xaxis);	fscanf		(stdin,"String", yaxis);	yaxis	   = Min(1,Max (0,0 + yaxis));	fscanf		(stdin,"Number,Number", xinches, yinches);} /* ________________________________________________________________________________________________*/function ErrorOut (errString){	fprintf (stdout, "ERROR:<DIV class = 'ErrorTagSM'>\n", errString, "\n</DIV>");	return 0;}/* ________________________________________________________________________________________________*/ExecuteAFile			("../Shared/DBTools.ibf");slacDBID 		 		= _openCacheDB      (filePrefix);if (optionOutput!=2){	pv = _ExecuteSQL  		(slacDBID,"SELECT COL_VALUE FROM BGM_SUMMARY WHERE COL_KEY = 'Cutoff'");	pv = 0+pv[0];	pv = Min(1,Max (0,pv));	ExecuteAFile 				("../Shared/OutputsBGM.bf");	tableKeys = Rows			(BGM_ResultTable);}haveAncestralSamples 		= _TableExists (slacDBID, "BGM_RESULTS_SA");if (optionOutput < 2){	if (haveAncestralSamples)	{		titleMatrix 		= selLabelMatrixSACSV;		r = Columns(selLabelMatrixSA)-1;		titleMatrixHTML = {1,r};		for (k=0; k < r; k=k+1)		{			titleMatrixHTML[k]		= selLabelMatrixSA[k];		}		keyMap			    = {{"Codon1","Codon2","Edge12","E12","Edge21","E21","SUM","ESUM"}};		generalInfo 		= _ExecuteSQL  (slacDBID,"SELECT Codon1,Codon2,Edge12,E12,Edge21,E21,Edge12+Edge21 as SUM,E12+E21 as ESUM FROM BGM_RESULTS ORDER BY Codon1,Codon2");	}	else	{		titleMatrix 		= selLabelMatrixCSV;		titleMatrixHTML		= selLabelMatrix;				generalInfo 		= _ExecuteSQL  (slacDBID,"SELECT Codon1,Codon2,Edge12,Edge21,Edge12+Edge21 as SUM FROM BGM_RESULTS ORDER BY Codon1,Codon2");		keyMap 				= keyMapPLAIN;	}		bgmInfo 		= AVL2Matrix (generalInfo, keyMap);	colCount 		= Columns (bgmInfo);	rowCount 		= Rows    (bgmInfo);		if (optionOutput == 1) /* CSV */	{		fprintf (stdout, titleMatrix[0]);		for (r=1; r<colCount; r=r+1)		{			fprintf (stdout, ",", titleMatrix[r]);		}				for (r=0; r<rowCount; r=r+1)		{			fprintf (stdout, "\n", bgmInfo[r][0]);			for (c=1; c<colCount; c=c+1)			{				fprintf (stdout, ",", bgmInfo[r][c]);			}		}	}	else	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Detailed Spidermonkey/BGM results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<DIV CLASS = 'RepClassSM'>Detailed analysis results (see legend at the bottom of the page)");						fprintf (stdout, "<TABLE BORDER = '0' style = 'margin:10px'><TR class = 'TRReportT'>");		for (r=0; r<colCount; r=r+1)		{			fprintf (stdout, "<TD>", titleMatrixHTML[r], "</TD>");		}		fprintf (stdout, "</TR>\n");		for (r=0; r<rowCount; r=r+1)		{			trClass = "TRReportNT";			if (bgmInfo[r][colCount-1]>=pv)			{				trClass = "TRReportPS";						}						fprintf (stdout, "<TR class = '",trClass,"' style = 'font-size:9px;'>");			for (c=0; c<colCount; c=c+1)			{				if (bgmInfo[r][c]$1 != bgmInfo[r][c])				{					fprintf (stdout, "<TD>", Format (bgmInfo[r][c],5,2), "</TD>");				}				else				{					fprintf (stdout, "<TD>", bgmInfo[r][c], "</TD>");								}			}			fprintf (stdout, "</TR>\n");		}		fprintf (stdout, "</TABLE>");				if (haveAncestralSamples)		{			fscanf ("../Formats/bgm_report_sa","Raw",bgm_Legend);				}		else		{			fscanf ("../Formats/bgm_report","Raw",bgm_Legend);		}		fprintf (stdout, bgm_Legend);		fprintf (stdout, "</DIV>");	}}else{	if (optionOutput == 2)	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Generate network plots from Spidermonkey/BGM results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<FORM method='POST' name = 'plotForm' enctype='multipart/form-data' action='",BASE_CGI_URL_STRING,"rungnuplot.pl' target = '_blank'>\n<input type = 'hidden' value = '",filePrefix,"' name = 'inFile'><input type = 'hidden' value = '6' name = 'task'>");		if (haveAncestralSamples)		{			fscanf  ("../Formats/bgmplot_sa","Raw",bgmplot);		}		else		{			fscanf  ("../Formats/bgmplot","Raw",bgmplot);				}		fprintf (stdout, bgmplot, "</form>");	}	else	{		pval = Min(1,Max (0,0+xaxis));				xinches = xinches/96;		yinches = yinches/96;				isDirected = ((style&&1) == "UNDIRECTED") == 0;				if (isDirected)		{			fprintf (stdout, "di");		}				fprintf (stdout, "graph G{\nratio = \"fill\"; size = \"",xinches,",",yinches,"\"; margin = \"0,0\"; page = \"",xinches,",",yinches,"\";\n node [shape=box]; ");			    pv = _ExecuteSQL  (slacDBID,"SELECT CODON1 AS CODON1, CODON2 AS CODON2, EDGE12 AS EDGE12, EDGE21 AS EDGE21, EDGE12+EDGE21 AS SUM FROM BGM_RESULTS WHERE SUM >= " + pval);		nodeList = {};		edges    = "";		edges 	 * 128;				if (haveAncestralSamples)		{			replicateCount = _ExecuteSQL (slacDBID, "SELECT DISTINCT REPLICATE FROM BGM_RESULTS_SA");			replicateCount = Abs(replicateCount);		}				highlight = "";		support	  = "";				for (k=0; k < Abs (pv); k=k+1)		{			node1 = 0 + (pv[k])["CODON1"];			node2 = 0 + (pv[k])["CODON2"];			if (haveAncestralSamples)			{				_count = _ExecuteSQL (slacDBID, "SELECT COUNT(REPLICATE) FROM BGM_RESULTS_SA WHERE Edge12 + Edge21 >= " + pval + " AND " + 										"Codon1 = " + node1 + " AND Codon2= " + node2);				_count = (0+_count[0])/replicateCount;				if (_count >= yaxis)				{					highlight = "";				}				else				{					highlight=" style=\"dashed\" ";				}				support = " (" + _count*100 + "%)"; 			}						checkNode (node1);			checkNode (node2);			if (isDirected)			{				p1 = 0 + (pv[k])["EDGE12"];				p2 = 0 + (pv[k])["EDGE21"];								if (p2>p1)				{						n = node2;					node2 = node1;					node1 = n;				}				edges * ("" + node1 + " -> " + node2 + " [label = \"" + Format (p1,4,2) + "/" + Format (p2,4,2) + support + "\"" + highlight + "]\n");			}			else			{				edges * ("" + node1 + " -- " + node2 + " [label = \"" + Format (0 + (pv[k])["SUM"],4,2) + support + "\"" + highlight + "]\n");			}			} 		edges 	 * 0;		fprintf (stdout, "\n", edges, "\n}");	}}_closeCacheDB (slacDBID);