ExecuteAFile("../Shared/HyPhyGlobals.ibf");ExecuteAFile("../Shared/GrabBag.bf");fscanf		(stdin,"String", filePrefix);fscanf		(stdin,"Number", optionOutput);if (optionOutput >= 4){	fscanf		(stdin,"String", gnuplotFormat);	fscanf		(stdin,"String", style);	fscanf		(stdin,"String", xaxis);	fscanf		(stdin,"String", yaxis);	fscanf		(stdin,"String", size);} /* ________________________________________________________________________________________________*/function ErrorOut (errString){	fprintf (stdout, "ERROR:<DIV class = 'ErrorTagSM'>\n", errString, "\n</DIV>");	return 0;}/* ________________________________________________________________________________________________*/baseAIC    = 0;baseAICc   = 0;baseBIC	   = 0;canUseAICc = 1;DB_FIELD_MAP = {};DB_FIELD_MAP [0] = "PARTITION";DB_FIELD_MAP [1] = "SEQUENCE";DB_FIELD_MAP [2] = "SITE";DB_FIELD_MAP [4] = "JOINT";DB_FIELD_MAP [5] = "MARGINAL";DB_FIELD_MAP [6] = "MARGINALP";DB_FIELD_MAP [7] = "SAMPLED";DB_FIELD_MAP [8] = "SAMPLEDP";if (optionOutput!=2){	ExecuteAFile	("../Shared/DBTools.ibf");	slacDBID 		 = _openCacheDB      (filePrefix);}if (optionOutput < 2){	if (optionOutput == 1)	{		generalInfo = _ExecuteSQL  (slacDBID,"SELECT PARTITION+1 AS PARTITION, SEQUENCE,SITE+1 AS SITE,JOINT,MARGINAL,MARGINALP,SAMPLED,SAMPLEDP FROM ASR_RESIDUES_TABLE ORDER BY PARTITION,SITE,SEQUENCE");		partInfo = _ExecuteSQL  (slacDBID,"SELECT SPAN,NODE_MAP FROM ASR_PARTITION_TABLES ORDER BY PARTITION");		partitionMaps = {};		offset        = {};		for (k = 0; k < Abs(partInfo); k = k+1)		{			ExecuteCommands ("n="+(partInfo[k])["NODE_MAP"]);			partitionMaps[k] = n;			if (k)			{				offset[k] = offset[k-1] + (partInfo[k])["SPAN"];			}		}						titleMatrix 	= {1,9};		titleMatrix[0]  = "Partition";		titleMatrix[1]  = "Sequence";		titleMatrix[2]  = "Site";		titleMatrix[3]  = "Cumulative Site";		titleMatrix[4]  = "Joint";		titleMatrix[5]  = "Marginal";		titleMatrix[6]  = "Marginal Support";		titleMatrix[7]  = "Sampled";		titleMatrix[8]  = "Sampled Support";		fprintf (stdout, titleMatrix[0]);		rowCount = Abs	   (generalInfo);		colCount = Columns (titleMatrix);		for (r=1; r<colCount; r=r+1)		{			fprintf (stdout, ",", titleMatrix[r]);		}		for (r=0; r<rowCount; r=r+1)		{			partID = 0 + (generalInfo[r])[DB_FIELD_MAP[0]];			fprintf (stdout, "\n", partID);			fprintf (stdout, ",", (partitionMaps[partID-1])[0+(generalInfo[r])[DB_FIELD_MAP[1]]]);			siteID = 0 + (generalInfo[r])[DB_FIELD_MAP[2]];			fprintf (stdout, ",", siteID);			fprintf (stdout, ",", siteID + offset[partID-1]);			for (c=4; c<colCount; c=c+1)			{				fprintf (stdout, ",", (generalInfo[r])[DB_FIELD_MAP[c]]);			}		}	}	else	{		defaultErrorOut ("Unsupported Format");	}}else{	if (optionOutput == 2)	{		defaultErrorOut ("Unsupported Format");	}	else	{		if (optionOutput >= 4)		{			defaultErrorOut ("Unsupported Format");		}		else		{			nodeInfo = _ExecuteSQL  (slacDBID,"SELECT COL_VALUE FROM ASR_SUMMARY WHERE COL_KEY = 'Nodemap'");			ExecuteCommands ("nodeInfo = " + nodeInfo[0]);			partInfo = _ExecuteSQL  (slacDBID,"SELECT NODE_MAP FROM ASR_PARTITION_TABLES ORDER BY PARTITION");			partitionMaps = {};			for (k = 0; k < Abs(partInfo); k = k+1)			{				ExecuteCommands ("n="+partInfo[k]);				partitionMaps[k] = stringMatrixToAVL ("n");			}			siteInfo = _ExecuteSQL  (slacDBID,"SELECT PARTITION,SITE,JOINT,MARGINAL,SAMPLED FROM ASR_RESIDUES_TABLE ORDER BY PARTITION,SITE");						for (seqCount = 0; seqCount < Rows(nodeInfo); seqCount = seqCount + 1)			{				jointS   = ""; jointS * 128;				margS    = ""; margS * 128;				sampledS = ""; sampledS * 128;								for (k = 0; k < Abs (partitionMaps); k = k+1)				{					sqlCode  = "SELECT JOINT,MARGINAL,SAMPLED FROM ASR_RESIDUES_TABLE WHERE SEQUENCE = "+((partitionMaps[k])[nodeInfo[seqCount][k+2]]-1)+" AND PARTITION = "+k+" ORDER BY SITE";					DoSQL (slacDBID, sqlCode, "return growFasta();");				}								jointS * 0; margS * 0; sampledS * 0;								fprintf (stdout, ">", nodeInfo[seqCount][0], "_joint\n", jointS, "\n");				fprintf (stdout, ">", nodeInfo[seqCount][0], "_marginal\n", margS, "\n");				fprintf (stdout, ">", nodeInfo[seqCount][0], "_sampled\n", sampledS, "\n");			}		}	}}if (optionOutput!=2){	_closeCacheDB (slacDBID);}function growFasta(){	jointS   * SQL_ROW_DATA[0];	margS    * SQL_ROW_DATA[1];	sampledS * SQL_ROW_DATA[2];	return 0;}