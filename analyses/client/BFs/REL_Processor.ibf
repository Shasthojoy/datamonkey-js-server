/*---------------------------------------------------------------*/function     addAVariable (infoMx, varName){	record = {};	record["Variable"] = varName;	for (_i=0; _i < Columns (infoMx); _i = _i+1)	{		record["Rate"]  = _i;		record["Value"] = infoMx[0][_i];		record["Prob"]  = infoMx[1][_i];		_InsertRecord (slacDBID,"REL_DISTRIBUTIONS", record);	}	return Columns (infoMx);}/*---------------------------------------------------------------*/ExecuteAFile ("../Shared/OutputsREL.bf");sscanf (rawIn,"Number,Number,Number,Number,NMatrix,NMatrix,NMatrix,NMatrix,String,Raw",		_in_BayesFactor,nucLL,codLL,treeMode, treeLengthArray,cDistribution,dDistribution,marginals,dummy,lfFit);_CheckDBID (slacDBID,"REL_DISTRIBUTIONS",REL_DistributionTable);resp  = addAVariable (cDistribution, "Alpha");resp2 = addAVariable (dDistribution, "Beta");customLoopCounter2 = resp*resp2;ratioVariable = {3,customLoopCounter2};diff 		= 0;meanDNDS	= 0;meanDNmDS   = 0;varDNmDS	= 0;for (h=0; h<resp; h+=1){	for (v=0; v<resp2; v+=1)	{		ratioVariable[0][diff] = dDistribution[0][v]-cDistribution[0][h];		ratioVariable[1][diff] = dDistribution[1][v]*cDistribution[1][h];		ratioVariable[2][diff] = diff;		meanDNDS  += ratioVariable[1][diff]*(dDistribution[0][v]/cDistribution[0][h]);		meanDNmDS += ratioVariable[1][diff]*ratioVariable[0][diff];		varDNmDS  += ratioVariable[1][diff]*(ratioVariable[0][diff])^2;		diff += 1; 	}}addAVariable (ratioVariable, "Ratio");priorPS		    = 0;weightF2		= {1,customLoopCounter2};for (h = 0; h<customLoopCounter2; h=h+1){	if (ratioVariable[0][h] > 0)	{		priorPS    += ratioVariable[1][h];		weightF2[h] = 1;	}}allPos = 0;allNeg = 0;if (priorPS > 0 && priorPS < 1){	priorPS = priorPS/(1-priorPS);}else{	if (priorPS == 0)	{		allNeg = 1;	}		else	{		allPos = 1;	}	}weightingFactors = Transpose(ratioVariable[1][-1]);posSelected = 0;negSelected = 0;weightingFactors = ratioVariable[1][-1];_CheckDBID (slacDBID,"REL_RESULTS",REL_ResultTable);record = {};	for (h = 0; h < Columns (marginals); h+=1){			record["Codon"] = h+1;	scaledProbs 	= (weightingFactors$Transpose(marginals[-1][h]));	scaledProbs     = scaledProbs * (1/(+scaledProbs));			postMeanAlpha   = 0;	postMeanBeta 	= 0;	postPS			= 0;	for (v = 0; v < customLoopCounter2; v=v+1)	{		postMeanAlpha = postMeanAlpha + cDistribution[0][v$resp2]*scaledProbs[v];		postMeanBeta  = postMeanBeta  + dDistribution[0][v%resp2]*scaledProbs[v];		if (ratioVariable[0][v] > 0)		{			postPS = postPS + scaledProbs[v];		}	}			record["dS"]   = postMeanAlpha;	record["dN"]   = postMeanBeta;	record["dSdN"] = postMeanBeta-postMeanAlpha;	if (allPos + allNeg == 0)	{		psFactor   = (weightingFactors$weightF2*marginals[-1][h])[0]/normFactor;		if (psFactor == 0)		{			negSelected     = negSelected+1;			record["PosPP"] = 0;			record["NegPP"] = 1;			record["PosBF"] = 0;			record["NegBF"] = 1e25;		}		else		{			if (psFactor == 1)			{				posSelected = posSelected + 1;				record["PosPP"] = 1;				record["NegPP"] = 0;				record["PosBF"] = 1e25;				record["NegBF"] = 0;			}			else			{								record["PosPP"] = postPS;				record["NegPP"] = 1-postPS;				postPS	   = postPS/(1-postPS)/priorPS;									if (postPS >= _in_BayesFactor)				{					posSelected = posSelected + 1;				}				else				{					if (postPS <= 1/_in_BayesFactor)					{						negSelected = negSelected + 1;					}				}				record["PosBF"] = postPS;				record["NegBF"] = 1/postPS;			}		}	}	else	{		if (allNeg == 0)		{			record["PosPP"] = 0;			record["NegPP"] = 1;			record["PosBF"] = 0;			record["NegBF"] = 1;			}		else		{			record["PosPP"] = 1;			record["NegPP"] = 0;			record["PosBF"] = 1;			record["NegBF"] = 0;					}	}	_InsertRecord (slacDBID,"REL_RESULTS", record);}lfOut = BASE_OUTPUT_PATH + filePrefix +"_rel.bf";fprintf (lfOut, CLEAR_FILE, "#NEXUS\n", lfFit);REL_SummaryTable = {};REL_SummaryTable ["COL_KEY"] 	 = "STRING";REL_SummaryTable ["COL_VALUE"]  = "STRING";_CheckDBID 		  (slacDBID,"REL_SUMMARY",REL_SummaryTable);record = {};record ["COL_KEY"] = "BF";record ["COL_VALUE"] = _in_BayesFactor;_InsertRecord (slacDBID,"REL_SUMMARY", record);record ["COL_KEY"] = "TreeLengths";record ["COL_VALUE"] = ""+treeLengthArray;_InsertRecord (slacDBID,"REL_SUMMARY", record);record ["COL_KEY"] = "NucLL";record ["COL_VALUE"] = nucLL;_InsertRecord (slacDBID,"REL_SUMMARY", record);record ["COL_KEY"] = "CodLL";record ["COL_VALUE"] = codLL;_InsertRecord (slacDBID,"REL_SUMMARY", record);record ["COL_KEY"] = "dNdS";record ["COL_VALUE"] = meanDNDS;_InsertRecord (slacDBID,"REL_SUMMARY", record);record ["COL_KEY"] = "PosSel";record ["COL_VALUE"] = posSelected;_InsertRecord (slacDBID,"REL_SUMMARY", record);record ["COL_KEY"] = "NegSel";record ["COL_VALUE"] = negSelected;_InsertRecord (slacDBID,"REL_SUMMARY", record);record ["COL_KEY"] = "TreeMode";record ["COL_VALUE"] = treeMode;_InsertRecord (slacDBID,"REL_SUMMARY", record);fprintf (stdout, "<H1 CLASS='SuccessCap'>REL analysis results</H1>");jobFileName = BASE_CGI_URL_STRING + "slacreport.pl?file=" + filePrefix + "&task=3&format=";fprintf (stdout, "<DIV CLASS='RepClassCT'><b>Reports</b> <a href='",jobFileName,"0'>[HTML]</a> <a href='",			        jobFileName,"1' target = '_blank'>[CSV]</a> <a href='",jobFileName,"2",			        "'>[Plots]</a> <a href='",BASE_HTML_URL_STRING,filePrefix,"_rel.bf",			        "'>[HyPhy BF Fit]</a></DIV>");		treeAVL = {};			        for (h = 0; h < Rows(treeLengthArray); h=h+1){	treeAVL [h+1] = treeLengthArray[h];}			        fprintf (stdout, _makeJobIDHTML(filePrefix), 				 _makeDataDescriptionTM (slacDBID,treeMode, treeAVL));				 srv = Transpose (ratioVariable)%0;				 				 fprintf (stdout, "<DIV CLASS='RepClassSM'>\n<b>Inferred rate distribution</b><p>",				 "<span style = 'color:",colors[1][1],";background-color:",colors[0][1],";border: solid black 1px;'>Rate class has dN&gt;dS</span>&nbsp;",				 				 "<span style = 'color:",colors[1][0],";background-color:",colors[0][0],";border: solid black 1px;'>Rate class has dN&lt;dS</span>",				 				 "<p><TABLE BORDER = '0' CELLSPACING = '0'><TR CLASS='TRReport' style = 'font-size:11px;'><TD>Rate Class</TD>");for (h=0; h<customLoopCounter2; h=h+1){	fprintf (stdout, "<TD>", h+1,"</TD>");}fprintf (stdout,"<TD>Summary</TD></TR><TR CLASS='TRReport1' style = 'font-size:11px;'><TD>dS</TD>");for (h=0; h<customLoopCounter2; h=h+1){	fprintf (stdout, "<TD style='color:",colors[1][srv[h][0]>0],";background-color:",colors[0][srv[h][0]>0],"'>", Format(cDistribution[0][srv[h][2]$resp2],8,2),"</TD>");}fprintf (stdout,"<TD></TD></TR><TR CLASS='TRReport2' style = 'font-size:11px;'><TD>dN</TD>");for (h=0; h<customLoopCounter2; h=h+1){	fprintf (stdout, "<TD style='color:",colors[1][srv[h][0]>0],";background-color:",colors[0][srv[h][0]>0],"'>", Format(dDistribution[0][srv[h][2]%resp2],8,2),"</TD>");}fprintf (stdout,"<TD></TD></TR><TR CLASS='TRReport1' style = 'font-size:11px;'><TD>dN-dS</TD>");for (h=0; h<customLoopCounter2; h=h+1){	fprintf (stdout, "<TD style='color:",colors[1][srv[h][0]>0],";background-color:",colors[0][srv[h][0]>0],"'>", Format(srv[h][0],8,2),"</TD>");}fprintf (stdout,"<TD>Mean dN-dS: ",Format(meanDNmDS,8,3),"</TD></TR><TR CLASS='TRReport2' style = 'font-size:11px;'><TD>Prob.</TD>");for (h=0; h<customLoopCounter2; h=h+1){	fprintf (stdout, "<TD style='color:",colors[1][srv[h][0]>0],";background-color:",colors[0][srv[h][0]>0],"'>", Format(srv[h][1],8,3),"</TD>");}fprintf (stdout,"<TD>Std.Dev : ",Format(Sqrt(varDNmDS-meanDNmDS^2),8,3),"</TD></TR></TABLE></DIV>");doSLACM = _TableExists (slacDBID, "SLAC_SUMMARY");keyMap = {{"Codon","dS","dN","dSdN","PosPP","PosBF"}};if (priorPS == 0){	fprintf (stdout, "<DIV CLASS='RepClassSM'>No rates with dN&gt;dS were inferred for this datasets, suggesting that all sites are under purifying selection.</DIV>");}else {	if (priorPS == 1)	{		fprintf (stdout, "<DIV CLASS='RepClassSM'>No rates with dN&lt;dS were inferred for this datasets, suggesting that all sites are under diversifying selection.</DIV>");	}	else	{		if (posSelected)		{						_res = _ExecuteSQL (slacDBID, "SELECT Codon,dS,dN,dSdN,PosPP,PosBF FROM REL_RESULTS WHERE (PosBF>="+_in_BayesFactor+") ORDER BY Codon");			selMx = AVL2Matrix (_res, keyMap);						fprintf (stdout, "<DIV CLASS='RepClassSM'><form action='",BASE_CGI_URL_STRING,"slacpvalue.pl' method = 'GET'>Found <b>",posSelected,							   "</b> positively selected sites (<input type = 'hidden' name = 'file' value = '",							   filePrefix,"'><input type = 'text' name = 'pvalue' value = '",							   _in_BayesFactor,							   "' size = '5'> significance level <input type = 'hidden' value = '3' name = 'task'><input type = 'submit' value = 'Retabulate'>)<p>",							   PrintASCIITable  (selMx, selLabelMatrix,doSLACM),							   "</form></DIV>");		}		else		{			fprintf (stdout, "<DIV CLASS='RepClassSM'><form action='",BASE_CGI_URL_STRING,"slacpvalue.pl' method = 'GET'>Found no positively selected sites (<input type = 'hidden' name = 'file' value = '",							  filePrefix,"'><input type = 'text' name = 'pvalue' value = '",							   _in_BayesFactor,							   "' size = '5'> significance level <input type = 'hidden' value = '3' name = 'task'><input type = 'submit' value = 'Retabulate'>)</form></DIV>");		}			keyMap = {{"Codon","dS","dN","dSdN","NegPP","NegBF"}};		if (negSelected)		{			_res = _ExecuteSQL (slacDBID, "SELECT Codon,dS,dN,dSdN,NegPP,NegBF FROM REL_RESULTS WHERE (NegBF>="+_in_BayesFactor+") ORDER BY Codon");			selMx = AVL2Matrix (_res, keyMap);			fprintf (stdout, "<DIV CLASS='RepClassSM'>Found <b>",negSelected,"</b> negatively selected sites (",_in_BayesFactor," significance level)<p>",PrintASCIITable  (selMx, selLabelMatrix,doSLACM),"</DIV>");		}		else		{			fprintf (stdout, "<DIV CLASS='RepClassSM'>Found no negatively selected sites (",_in_BayesFactor," significance level)</DIV>");		}	}}