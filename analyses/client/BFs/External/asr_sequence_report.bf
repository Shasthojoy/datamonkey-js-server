ExecuteAFile ("../../Shared/HyPhyGlobals.ibf");ExecuteAFile ("../../Shared/GrabBag.bf");ExecuteAFile ("../../Shared/ReadDelimitedFiles.bf");ExecuteAFile ("../../Shared/DBTools.ibf");fscanf		 (stdin, "String", arg);arg = splitOnRegExp (arg,"-");if (Abs (arg) != 2){	defaultErrorOut ("Argument Error");	return 0;}slacDBID 		 = _openCacheDB      (arg[0]);haveModel 	= _TableExists (slacDBID, "ASR_SUMMARY");if (haveModel){	asrInfo = _ExecuteSQL  (slacDBID,"SELECT COL_VALUE FROM ASR_SUMMARY WHERE COL_KEY = 'Nodemap'");	ExecuteCommands ("asrInfo = " + asrInfo[0]);	seqID = 0 + arg[1];	if (seqID >= Rows (asrInfo))	{		defaultErrorOut ("Argument Error");		_closeCacheDB (slacDBID);		return 0;	}	pInfo = _ExecuteSQL  (slacDBID,"SELECT NODE_MAP FROM ASR_PARTITION_TABLES ORDER BY PARTITION");		siteInfo = {};	offset	 = 1;			fprintf (stdout, "<H1 class = 'SuccessCap'>ASR sequence report for ", asrInfo[seqID][0], "</H1>");	fprintf (stdout, _makeJobIDHTML(arg[0]));		fprintf (stdout, "<DIV CLASS = 'RepClassSM'><b>Consensus tree</b><p><img border = '1' src = '", 				 BASE_CGI_URL_STRING,"renderPSImage.pl?file=",arg[0],"_tree_cons_", arg[1], 				 "'></DIV>");	fprintf (stdout, "<DIV CLASS = 'RepClassSM'>Site by site report. <i>See below for the legend</i><p>", 					 "<TABLE BORDER = '0' style = 'margin:10px'><TR class = 'TRReportT'><TD>Site</TD><TD>Joint Reconstruction</TD><TD>Marginal Reconstruction</TD><TD>Support</TD><TD>Sampled Reconstruction</TD><TD>Support</TD><TD></TD></TR>");		for (k = 2; k < Columns (asrInfo); k = k + 1)	{		if (Columns (asrInfo) > 3)		{			fprintf (stdout, "<TR CLASS = 'TRReportNS'><TD COLSPAN = 7 style = 'text-align:center;'>Partition ",k-1,"</TD></TR>") ;		}		ExecuteCommands ("seqValue = " + pInfo[k-2]);		for (r = 0; r < Columns (seqValue); r = r + 1)		{			if (seqValue[r] == asrInfo[seqID][k])			{				break;			}		}		if (r == Columns (seqValue))		{			defaultErrorOut ("Internal Argument Error (partition node mapping)");			_closeCacheDB (slacDBID);			return 0;		}				siteInfo = _ExecuteSQL  (slacDBID,"SELECT * FROM ASR_RESIDUES_TABLE WHERE PARTITION = " + (k-2) + " AND SEQUENCE = " + r + " ORDER BY SITE");				for (c = 0; c < Abs(siteInfo); c = c+1)		{			ma = (siteInfo[c])["MARGINAL"];			sa = (siteInfo[c])["SAMPLED"];			jo = (siteInfo[c])["JOINT"];						if (ma == sa && jo == sa)			{				class = "TRReportNT";			}			else			{				class = "TRReportPS";						}			fprintf (stdout, "<TR class = '" , class ,"'><TD>", offset+(siteInfo[c])["SITE"], "</TD><TD>", jo, "</TD><TD>", ma, "</TD><TD>", (siteInfo[c])["MARGINALP"], "</TD><TD>", sa, "</TD><TD>", (siteInfo[c])["SAMPLEDP"], "</TD><TD>",					 		 "<a href = '",BASE_CGI_URL_STRING,"wrapHyPhyBF.pl?file=asr_site_report&arguments=",arg[0],"-",k-2,"-",r,"-",c,"-",offset+(siteInfo[c])["SITE"]-1,"'>[details]</a></TR>") ;		}				offset = offset + Abs(siteInfo);	}		fprintf (stdout, "</TABLE>");		fscanf  ("../../Formats/asr_branch_report", "Raw", footer);		fprintf (stdout, footer, "</DIV>");}else{	defaultErrorOut ("ASR analysis has not been run for this file");}_closeCacheDB (slacDBID);