ExecuteAFile ("../../Shared/HyPhyGlobals.ibf");ExecuteAFile ("../../Shared/GrabBag.bf");ExecuteAFile ("../../Shared/PostScript.bf");ExecuteAFile ("../../Shared/ReadDelimitedFiles.bf");ExecuteAFile ("../../Shared/DBTools.ibf");fscanf		 (stdin, "String", arg);arg = splitOnRegExp (arg,"-");if (Abs (arg) < 3){	fprintf (stdout, "");	return 0;}slacDBID 		 = _openCacheDB      (arg[0]);info = _ExecuteSQL (DB_ID, "SELECT * FROM MEME_MAPPINGS WHERE CODON = " + arg[1]);if (Abs (info)) {    if (arg[2] > 0) {        treeID = (info[0])["Tree"];        treeID = _ExecuteSQL (DB_ID, "SELECT COL_VALUE FROM MEME_SUMMARY WHERE COL_KEY = 'RenderTree" + treeID + "'");        UseModel (USE_NO_MODEL);        Tree drawMe = treeID[0];        bAnnotation = {};        for (bID = 0; bID < Abs (info); bID += 1) {            bAnnotation[(info[bID])["Branch"] && 1] = {{ 0 + (info__[bID__])["PP"], 0 + (info__[bID__])["EBF"], 0 + (info__[bID__])["Syn"], 0 + (info__[bID__])["NonSyn"] }};        }        fprintf (stdout, mapSubstitutionsToBranches("drawMe", bAnnotation, 1));   } else {        bAnnotation = {};        for (bID = 0; bID < Abs (info); bID += 1) {            ebf = 0+(info[bID])["EBF"];            if (ebf > 1000) {                ebf = "&gt; 1000";            } else {                ebf = Format (ebf, 6, 1);            }            bAnnotation[(info[bID])["Branch"]] = {"0": Format(0+(info[bID])["PP"],4,3), "1": ebf__ , "2": 0+(info[bID])["Syn"], "3": 0+(info[bID])["NonSyn"] };        }        fprintf (stdout, "<script type='text/javascript' src='http://www.datamonkey.org/wz_tooltip.js'></script><H1 class = 'SuccessCap'>Empirical Bayes analysis of site " + arg[1] + " using MEME</H1>", _makeJobIDHTML (arg[0]));	    fprintf (stdout, "<DIV CLASS='RepClassSM'>");            	    	echoAVLAsTable (bAnnotation, {"0":toolTipCode("Branch TOOLTIP","The name of the branch (see a plot below)"), 											 "1":toolTipCode("Post. Prob. TOOLTIP","The empirical posterior probability for having &omega;<sup>+</sup> &gt; 1 along this branch"), 											 "2":toolTipCode("Emp. Bayes Factor TOOLTIP","The empirical Bayes factor for having &omega;<sup>+</sup> &gt; 1 along this branch"), 											 "3":toolTipCode("Syn. Subs TOOLTIP","The number of synonymous substitutions inferred along this branch"),											 "4":toolTipCode("Nonsyn. Subs TOOLTIP","The number of non-synonymous substitutions inferred along this branch")}											 , 1, 0, 12);	     fprintf (stdout,                   "<DIV CLASS = 'HelpfulTips'>	                        The tree below is a graphical representation of the evolutionary history of the site. 	                        Each branch that has experienced substitutions (mapped using the alternative MEME model	                        fit at the site), is labeled with the pair Syn : Non-Syn substitution counts. 	                        Branches with more total inferred substitutions are also drawn with thicker lines.	                        Each branch is colored according to the magnitude of the emprical bayes factor (EBF) for	                        having &omega;&gt;1 along that branch. Brighter reds - higher EBF values (also see the scale bar).<p>	                        <b>Please note that the reliability of identifying an individual branch subject to selection at a given	                        site is quite low and this plot should be treated as an exploration tool, rather than a robust statistical 	                        inference method</b>.	                      </DIV><p>	                      View the tree as a <span><a href='"+BASE_CGI_URL_STRING+"wrapHyPhyBF.pl?file=meme_plotter&arguments="+arg[0]+"-"+arg[1]+"-1&mode=2'>[PDF]</a></span><br clear = all>	                      <IMG BORDER = '1' style = 'margin-top : 10px' ALT = 'Tree Plot' SRC = '"+BASE_CGI_URL_STRING+"wrapHyPhyBF.pl?file=meme_plotter&arguments="+arg[0]+"-"+arg[1]+"-1&mode=3'>	                      </DIV>");           }} else {    if (arg[2] > 0) {        psErrorOut ("There is no information for branch-site mapping on this site");    } else {        ErrorOut ("No data for this site");    }}_closeCacheDB (slacDBID);function linearGradient (fromVal, toVal, x, y, width, height) {    _gradBox = ""; _gradBox * 100;    _gradBox = "gsave\n1 setlinewidth 0 setlinecap\n";    for (k = 0; k < width; k+=1) {        _gradBox * ("newpath " + Join(" ", (fromVal*((width-1-k)/width) + toVal*(k/width))) + " setrgbcolor " + (x+k) + " " + y + " moveto 0 " + height + " rlineto stroke\n");     }    _gradBox * ("newpath 0 0 0 setrgbcolor " + x + " " + y + " moveto " + width  + " 0 rlineto " + " 0 " + (height) + " rlineto " + (-width) + " 0 rlineto closepath stroke\n");    _gradBox * "grestore\n";    _gradBox * 0;    return _gradBox;}function colorEB (value) {    maxV = Log(100);    if (value == 0.) {        value = -maxV;    } else {        value = Log (value);    }    value = Min (maxV, Max (-maxV, value));    if (value < 0) {        return {{0,-value__/maxV,-value__/maxV}}    }     return {{value__/maxV__,0,0}};}function mapSubstitutionsToBranches (treeID, branchAnnotation, doLegend) {    TREE_OUTPUT_OPTIONS = {};    TREE_OUTPUT_OPTIONS ["TREE_OUTPUT_PREFIX_POSTSCRIPT"] = _HYPSTextCommands (0);    nodeNames = Eval ("BranchName (`treeID`,-1)");    for (_id = 0; _id < Columns (nodeNames) - 1; _id += 1) {                node_name = nodeNames[_id];        node_name_uc = node_name && 1;        if (Abs (branchAnnotation [node_name_uc])) {            TREE_OUTPUT_OPTIONS[node_name] = {};            subCount = (branchAnnotation [node_name_uc])[2] + (branchAnnotation [node_name_uc])[3];            if (subCount > 0) {                (TREE_OUTPUT_OPTIONS[node_name])["TREE_OUTPUT_OVER_BRANCH"] = "(" + (branchAnnotation [node_name_uc])[2] + ":" + (branchAnnotation [node_name_uc])[3] + ") drawletter";                (TREE_OUTPUT_OPTIONS[node_name])["TREE_OUTPUT_BRANCH_THICKNESS"] = 1 + 2*subCount;            }            (TREE_OUTPUT_OPTIONS[node_name])["TREE_OUTPUT_BRANCH_COLOR"] = colorEB ((branchAnnotation [node_name_uc])[1]);        }    }        treeAVL = Eval("`treeID` ^ 0");	maxD    = 0;	for (n=1; n<Abs(treeAVL); n=n+1)	{		maxD = Max (maxD, (treeAVL[n])["Depth"]);	}		imageHeight = Min (Eval("TipCount (`treeID`)") * 28 + 20, 792);	imageWidth  = Min (maxD * 75, 612);	if (doLegend) {	    TREE_OUTPUT_OPTIONS ["TREE_OUTPUT_EXTRA_POSTSCRIPT"] = linearGradient ({{0,0,0}},{{1,0,0}}, imageWidth - 50, imageHeight - 50, 50, 10) + linearGradient ({{0,1,1}},{{0,0,0}}, imageWidth - 100, imageHeight - 50, 50, 10) +                                                            " " + (imageWidth - 100) + " " + (imageHeight - 65) + "(" + Exp (-maxV) + ") centertext \n" +                                                            " " + (imageWidth) + " " + (imageHeight - 65) + "(" + Exp (maxV) + ") centertext \n" +                                                            " " + (imageWidth - 50) + " " + (imageHeight - 65) + "(1) centertext \n" +                                                            " " + (imageWidth - 50) + " " + (imageHeight - 35) + "(EBF) centertext \n";    }		return Eval("PSTreeString (`treeID`,\"STRING_SUPPLIED_LENGTHS\",{{imageWidth,imageHeight}})");}