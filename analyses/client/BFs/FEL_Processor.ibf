ExecuteAFile ("../Shared/OutputsFEL.bf");sscanf (rawIn,"Number,NMatrix,Number,NMatrix",p_value,treeLengths,treeMode,FEL_result_matrix);_CheckDBID (slacDBID,"FEL_RESULTS",FEL_ResultTable);record = {};fields = Rows(FEL_ResultTable);fc     = Columns(FEL_result_matrix);treeLengthArray = {};for (r = 0; r < Rows(treeLengths); r = r+1){	treeLengthArray[r+1] = treeLengths[r];}posSelected = 0;negSelected = 0;p   		= Rows(FEL_result_matrix);upperBounds = _ExecuteSQL (slacDBID,"SELECT EndCodon FROM FILE_PARTITION_INFO ORDER BY PARTITION");for (r = 0; r < Abs(upperBounds); r=r+1){	upperBounds[r] = 0+upperBounds[r];}currentP = 0;for (r = 0; r < p; r=r+1){	record["Codon"] = r+1;	for (c=0; c < fc; c=c+1)	{		record[fields[c+1]] = FEL_result_matrix[r][c];	}	if (r > upperBounds[currentP])	{		currentP = currentP + 1;	}	record[fields[fc+1]]  = (FEL_result_matrix[r][1]-FEL_result_matrix[r][0])/treeLengths[currentP];	_InsertRecord (slacDBID,"FEL_RESULTS", record);	posSelected = posSelected + (FEL_result_matrix[r][0]<FEL_result_matrix[r][1] && FEL_result_matrix[r][5] <= p_value);	negSelected = negSelected + (FEL_result_matrix[r][0]>FEL_result_matrix[r][1] && FEL_result_matrix[r][5] <= p_value);}FEL_SummaryTable = {};FEL_SummaryTable ["COL_KEY"] 	 = "STRING";FEL_SummaryTable ["COL_VALUE"]  = "STRING";_CheckDBID 		  (slacDBID,"FEL_SUMMARY",FEL_SummaryTable);record = {};record ["COL_KEY"] = "PValue";record ["COL_VALUE"] = p_value;_InsertRecord (slacDBID,"FEL_SUMMARY", record);record ["COL_KEY"] = "TreeLengths";record ["COL_VALUE"] = ""+treeLengths;_InsertRecord (slacDBID,"FEL_SUMMARY", record);record ["COL_KEY"] = "PosSel";record ["COL_VALUE"] = posSelected;_InsertRecord (slacDBID,"FEL_SUMMARY", record);record ["COL_KEY"] = "NegSel";record ["COL_VALUE"] = negSelected;_InsertRecord (slacDBID,"FEL_SUMMARY", record);record ["COL_KEY"] = "TreeMode";record ["COL_VALUE"] = treeMode;_InsertRecord (slacDBID,"FEL_SUMMARY", record);fprintf (stdout, "<H1 CLASS='SuccessCap'>FEL analysis results</H1>");jobFileName = BASE_CGI_URL_STRING + "slacreport.pl?file=" + filePrefix + "&task=1&format=";fprintf (stdout, "<DIV CLASS='RepClassCT'><b>Reports</b> <a href='",jobFileName,"0'>[HTML]</a> <a href='",			        jobFileName,"1' target = '_blank'>[CSV]</a> <a href='",jobFileName,"2",			        "'>[Plots]</a></DIV>");			        fprintf (stdout, _makeJobIDHTML(filePrefix), 				 _makeDataDescriptionTM (slacDBID,treeMode, treeLengthArray));doSLACM = _TableExists (slacDBID, "SLAC_SUMMARY");if (doSLACM){	slacTM = _ExecuteSQL (slacDBID,"SELECT COL_VALUE FROM SLAC_SUMMARY WHERE COL_KEY = 'TreeMode'");	if (Abs(slacTM))	{		if ((0+(slacTM[0])) == treeMode)		{			doSLACM = 1;		}		else		{			doSLACM = 0;		}	}}keyMap  = {{"Codon","dS","dN","ScaledDNDS","p"}};if (posSelected){				_res = _ExecuteSQL (slacDBID, "SELECT Codon,dS,dN,p,ScaledDNDS FROM FEL_RESULTS WHERE (dS<dN AND p<="+p_value+") ORDER BY Codon");	selMx = AVL2Matrix (_res, keyMap);		fprintf (stdout, "<DIV CLASS='RepClassSM'><form action='",BASE_CGI_URL_STRING,"slacpvalue.pl' method = 'GET'>Found <b>",posSelected,					   "</b> positively selected sites (<input type = 'hidden' name = 'file' value = '",					   filePrefix,"'><input type = 'text' name = 'pvalue' value = '",					   p_value,					   "' size = '5'> significance level <input type = 'hidden' value = '1' name = 'task'><input type = 'submit' value = 'Retabulate'>)<p>",PrintASCIITable  (selMx, selLabelMatrix,doSLACM),"</form></DIV>");}else{	fprintf (stdout, "<DIV CLASS='RepClassSM'><form action='",BASE_CGI_URL_STRING,"slacpvalue.pl' method = 'GET'>Found no positively selected sites (<input type = 'hidden' name = 'file' value = '",					  filePrefix,"'><input type = 'text' name = 'pvalue' value = '",					   p_value,					   "' size = '5'> significance level <input type = 'hidden' value = '1' name = 'task'><input type = 'submit' value = 'Retabulate'>)</form></DIV>");}		if (negSelected){	_res = _ExecuteSQL (slacDBID, "SELECT Codon,dS,dN,p,ScaledDNDS FROM FEL_RESULTS WHERE (dS>dN AND p<="+p_value+") ORDER BY Codon");	selMx = AVL2Matrix (_res, keyMap);	fprintf (stdout, "<DIV CLASS='RepClassSM'>Found <b>",negSelected,"</b> negatively selected sites (",p_value," significance level)<p>",PrintASCIITable  (selMx, selLabelMatrix,doSLACM),"</DIV>");}else{	fprintf (stdout, "<DIV CLASS='RepClassSM'>Found no negatively selected sites (",p_value," significance level)</DIV>");}