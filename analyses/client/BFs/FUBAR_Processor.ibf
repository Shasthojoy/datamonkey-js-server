resName			= BASE_OUTPUT_PATH + filePrefix +"_" + suffix[kind] + ".php";
fprintf			(resName, CLEAR_FILE,"<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'><meta http-equiv='refresh' content='60'>",
				"<title>Almost there...</title></head><body>Generating a FUBAR report...this page will refresh in a minute (or you can try sooner).");

ExecuteAFile    ("../Shared/OutputsFUBAR.bf");
ExecuteAFile    ("../Shared/ReadDelimitedFiles.bf");

sscanf (rawIn,REWIND,"Number,Number,NMatrix,Number,NMatrix,Lines",posteriorP,treeMode,treeLengths,priorNN,fdr_helper,FUBAR_result_matrix);



_CheckDBID (slacDBID,"FUBAR_RESULTS",FUBAR_ResultTable);

treeLengthArray = {};
for (r = 0; r < Rows(treeLengths); r += 1) {
	treeLengthArray[r+1] = 3*treeLengths[r];
}

posSelected = 0;
negSelected = 0;


grid_info			= BASE_OUTPUT_PATH + filePrefix + ".grid_info";
fscanf                   (grid_info, "NMatrix,Raw", grid_points, site_probs);

site_probs = Eval (site_probs);
sites   = Columns (site_probs["conditionals"]);

grid_dim = Rows (grid_points);
record = {};

//fprintf (stdout, Rows(site_probs["conditionals"]), Columns (site_probs["conditionals"]), "\n");

unique_alpha = {};
unique_beta  = {};
posCount = 0;
negCount = 0;
neutCount = 0;

sample_info			= BASE_OUTPUT_PATH + filePrefix + ".samples";
fscanf                (sample_info, "NMatrix,NMatrix", sample_logs, grid_samples);
sample_count = Columns (sample_logs);

_CheckDBID 		  (slacDBID,"FUBAR_GRID",FUBAR_GridTable);
record = {};
records = {};

meanAlpha      = 0;
meanBeta       = 0;
meanOmega      = 0;
nonZeroAlpha    = 0;
wPosSel        = 0;
wNegSel        = 0;

for (r = 0; r < grid_dim; r += 1) {
    record ["alpha"] = grid_points[r][0];
    record ["beta"]  = grid_points[r][1];
    unique_alpha [ record ["alpha"]] = 1;
    unique_beta [ record ["beta"]] = 1;
    if (grid_points[r][0] < grid_points[r][1]) {
        posCount += 1;
    } else {
        if (grid_points[r][0] > grid_points[r][1]) {
            negCount += 1;
        } else {
            neutCount += 1;
        }
    }
    record ["logl"]  = + (Log((site_probs["conditionals"])[r][-1])+site_probs["scalers"]);
    record ["weight"] = (+ (grid_samples[-1][r]))/sample_count;
    if (record["logl"] < -1e10) {
        record["logl"] = -1e-10;
    }
    
    this_wt = record ["weight"];
    meanAlpha += record ["alpha"] * this_wt;
    meanBeta  += record ["beta"] * this_wt;
    if (this_wt > 0. && record ["alpha"] > 0.) {
        meanOmega += this_wt * record ["beta"] / record["alpha"];
        nonZeroAlpha += this_wt;
    }
    if (record ["alpha"] > record ["beta"]) {
        wNegSel += this_wt;
    } else {
        if (record ["alpha"] < record ["beta"]) {
            wPosSel += this_wt;
        }
    }

    records   + record;
}

meanOmega = meanOmega / nonZeroAlpha;

//fprintf (stdout, meanAlpha, "\n\n");

for (r = 0; r < grid_dim; r += 1) {
    (records[r])["alpha"] =  (records[r])["alpha"] / meanAlpha;
    (records[r])["beta"]  =  (records[r])["beta"] / meanAlpha;
}

grid_points = grid_points * (1/meanAlpha);

_InsertMultipleRecords (slacDBID,"FUBAR_GRID", records);

records = {};

p = Columns(FUBAR_result_matrix);

record = {};

for (r = 2; r < p; r += 1)
{
    splitLine = splitOnRegExp (FUBAR_result_matrix[r], ",");
    
    possel = 0 + splitLine[4];
	record["Codon"]  = splitLine[0];
	record["alpha"]  = (0+splitLine[1])/meanAlpha;
	record["beta"]   = (0+splitLine[2])/meanAlpha;
	record["dnmds"]  = (0+splitLine[3])/meanAlpha;
	record["possel"] = possel;
	record["negsel"] = splitLine[5];
	record["psr"]    = splitLine[6];
	record["neff"]   = splitLine[7];
	record["var"]    = splitLine[10];
	record["EBF"]    = possel/(1-possel) / (1-priorNN) * priorNN;
	
	_InsertRecord (slacDBID,"FUBAR_RESULTS", record);
	posSelected += (0 + splitLine[4]) >= posteriorP;
	negSelected += (0 + splitLine[5]) >= posteriorP;
}

FUBAR_SummaryTable = {};
FUBAR_SummaryTable ["COL_KEY"] 	 = "STRING";
FUBAR_SummaryTable ["COL_VALUE"]  = "STRING";
_CheckDBID 		  (slacDBID,"FUBAR_SUMMARY",FUBAR_SummaryTable);

record = {};
record ["COL_KEY"] = "PosteriorProbability";record ["COL_VALUE"] = posteriorP;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "TreeLengths";record ["COL_VALUE"] = ""+treeLengths;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "PosSel";record ["COL_VALUE"] = posSelected;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "NegSel";record ["COL_VALUE"] = negSelected;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "TreeMode";record ["COL_VALUE"] = treeMode;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "AlphaPoints";record ["COL_VALUE"] = Abs(unique_alpha);_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "BetaPoints";record ["COL_VALUE"] = Abs(unique_beta);_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "TotalPoints";record ["COL_VALUE"] = Abs(unique_beta)*Abs(unique_alpha);_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "PosGridPoints";record ["COL_VALUE"] = posCount;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "NegGridPoints";record ["COL_VALUE"] = negCount;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "NeutGridPoints";record ["COL_VALUE"] = neutCount;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
record ["COL_KEY"] = "PriorNull";record ["COL_VALUE"] = priorNN;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);
//record ["COL_KEY"] = "FDR";record ["COL_VALUE"] = ""+fdr_helper;_InsertRecord (slacDBID,"FUBAR_SUMMARY", record);


_CheckDBID 		  (slacDBID,"FUBAR_SITE_INFO",FUBAR_Site_Info);


for (s = 0; s < sites; s += 1) {
    site_conditionals = Transpose((site_probs["conditionals"])[-1][s]);
    records = {};
    record  = {};
    
    grid_weights = {1,grid_dim};
    
    for (p = 0; p < sample_count; p+=1) {
        localP = site_conditionals$(grid_samples[p][-1]);
        localP = localP * (1/(+localP));
        grid_weights += localP;
    }
    grid_weights = grid_weights * (1/sample_count);

    for (r = 0; r < grid_dim; r += 1) {
        record ["Codon"] = s+1;
        record ["alpha"] = grid_points[r][0];
        record ["beta"]  = grid_points[r][1];
        record ["weight"] = grid_weights[r];
        record ["prob"] = site_conditionals[r];
        records + record;
    }

    _InsertMultipleRecords (slacDBID,"FUBAR_SITE_INFO", records);
}

_CheckDBID 		  (slacDBID,"FUBAR_MCMC_TRACE",FUBAR_MCMC_Trace);

record = {};
for (r = 0; r < sample_count; r += 1) {
    record["sample"] = r+1;
    record["logL"]   = sample_logs[r];   
	_InsertRecord (slacDBID,"FUBAR_MCMC_TRACE", record);
}

fprintf (stdout, "<script type='text/javascript' src='http://www.datamonkey.org/wz_tooltip.js'></script>\n<H1 CLASS='SuccessCap'>FUBAR analysis results</H1>");

jobFileName = BASE_CGI_URL_STRING + "slacreport.pl?file=" + filePrefix + "&task=13&format=";

fprintf (stdout, "<DIV CLASS='RepClassCT'><b>Reports</b> <a href='",jobFileName,"0'>[HTML]</a> <a href='",
			        jobFileName,"1' target = '_blank'>[CSV]</a> <a href='",jobFileName,"2",
			        "'>[Plots]</a></DIV>");
			        
fprintf (stdout, _makeJobIDHTML(filePrefix), 
				 _makeDataDescriptionTM (slacDBID,treeMode, treeLengthArray));
				 
fprintf (stdout, "<DIV CLASS='RepClassSM'>",
                  gridReportString(slacDBID),
                  mcmcTraceReport (slacDBID),
                 "<p/>Posterior alignment-wide distribution of substitution rates<p/>",
                 "<dl>
                    <dt class = 'DT1'> <b>Mean values.</b> &beta; =", Format (meanBeta/meanAlpha,5,2), ",  &beta;-&alpha; = ", Format ((meanBeta-meanAlpha)/meanAlpha,5,2), ", &omega; = ", Format (meanOmega,5,2), "</dt>
                    <dt class = 'DT2'> <b>Weights.</b> Pr[&alpha; &gt; &beta;] = ", Format(wNegSel,4,3),", Pr[&alpha; = &beta;] = ", Format(1-wPosSel-wNegSel,4,3), ", Pr[&alpha; &lt; &beta;] = ", Format(wPosSel,4,3), "</dt>
                 </dl>",
                 "<IMG SRC = '" + BASE_CGI_URL_STRING + "wrapHyPhyBF.pl?file=fubar_plotter&arguments="+filePrefix+"-0-png&mode=5' WIDTH = '640' HEIGHT = '480' BORDER = '1'>",
                 "<p><a href='" + BASE_CGI_URL_STRING + "wrapHyPhyBF.pl?file=fubar_plotter&arguments="+filePrefix+"-0-svg&mode=4'>[SVG]</a>&nbsp;",
                 "<a href='" + BASE_CGI_URL_STRING + "wrapHyPhyBF.pl?file=fubar_plotter&arguments="+filePrefix+"-grid-svg&mode=4'>[FUBAR grid]</a>&nbsp;",
                 "</p></DIV>"
                 );		 

doSLACM = _TableExists (slacDBID, "SLAC_SUMMARY");

if (doSLACM)
{
	slacTM = _ExecuteSQL (slacDBID,"SELECT COL_VALUE FROM SLAC_SUMMARY WHERE COL_KEY = 'TreeMode'");
	if (Abs(slacTM))
	{
		if ((0+(slacTM[0])) == treeMode)
		{
			doSLACM = 1;
		}
		else
		{
			doSLACM = 0;
		}
	}
}

ExecuteAFile ("FUBAR_TablePrinter.ibf");