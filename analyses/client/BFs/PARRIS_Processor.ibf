/*---------------------------------------------------------------*/function     addAVariable (infoMx, varName){	record = {};	record["Variable"] = varName;	for (_i=0; _i < Columns (infoMx); _i = _i+1)	{		record["Rate"]  = _i;		record["Value"] = infoMx[0][_i];		record["Prob"]  = infoMx[1][_i];		_InsertRecord (slacDBID,"PARRIS_DISTRIBUTIONS", record);	}	return Columns (infoMx);}/*---------------------------------------------------------------*/function     reportADistribution (infoMx, varName, secondLabel){	dim = Columns (infoMx);	fprintf (stdout, "<TABLE BORDER = '0' CELLSPACING = '0'><TR CLASS='TRReport' style = 'font-size:12px;'><TD COLSPAN='",dim+2,"' align = 'left'><b>", varName, "</b></TD></TR>");		fprintf (stdout, "<TR CLASS='TRReport' style = 'font-size:11px;'><TD>Rate Class</TD>");	for (h=0; h<dim; h=h+1)	{		fprintf (stdout, "<TD>", h+1,"</TD>");	}	fprintf (stdout,"<TD>Summary</TD></TR><TR CLASS='TRReport1' style = 'font-size:11px;'><TD>",secondLabel,"</TD>");		meanDNmDS = 0;	varDNmDS  = 0;		for (h=0; h<dim; h=h+1)	{		fprintf (stdout, "<TD>", Format(infoMx[0][h],8,2),"</TD>");		meanDNmDS = meanDNmDS + infoMx[0][h]*infoMx[1][h];		varDNmDS  = varDNmDS + infoMx[0][h]^2*infoMx[1][h];	}		fprintf (stdout,"<TD>Mean : ",Format(meanDNmDS,8,3),"</TD></TR><TR CLASS='TRReport2' style = 'font-size:11px;'><TD>Prob.</TD>");		for (h=0; h<dim; h=h+1)	{		fprintf (stdout, "<TD>", Format(infoMx[1][h],8,3),"</TD>");	}		fprintf (stdout,"<TD>Std.Dev : ",Format(Sqrt(varDNmDS-meanDNmDS^2),8,3),"</TD></TR></TABLE>");			return 0;}	/*---------------------------------------------------------------*/PARRIS_DistributionTable 			= {};PARRIS_DistributionTable 			["Variable"]     = "STRING";PARRIS_DistributionTable 			["Rate"] 		 = "INTEGER";PARRIS_DistributionTable 			["Value"]    	 = "REAL";PARRIS_DistributionTable 			["Prob"]  		 = "REAL";sscanf (rawIn,"Number,Number,Number,Number,NMatrix,NMatrix,NMatrix,NMatrix,NMatrix",		_in_p_value,treeMode,nullLL,altLL,treeLengthArray,c1,d1,c2,d2);				fprintf (stdout, "<H1 CLASS='SuccessCap'>PARRIS analysis results</H1>");		treeAVL = {};			        for (h = 0; h < Rows(treeLengthArray); h=h+1){	treeAVL [h+1] = treeLengthArray[h];}			        fprintf (stdout, _makeJobIDHTML(filePrefix), 				 _makeDataDescriptionTM (slacDBID,treeMode, treeAVL));_CheckDBID (slacDBID,"PARRIS_DISTRIBUTIONS",PARRIS_DistributionTable);resp1  = addAVariable (c1, "M1Alpha");resp2  = addAVariable (d1, "M1Omega");resp3  = addAVariable (c2, "M2Alpha");resp4  = addAVariable (d2, "M2Omega");LRT  = 2*(altLL-nullLL);myPV = 1-CChi2(LRT,2);fprintf (stdout, "<DIV CLASS='RepClassSM'>\n<b>PARRIS test for positive selection</b><DL><DT class = 'DT1'>Null model, Log(L) = ",nullLL,"<DT class = 'DT2'>Alternative model, Log(L) = ",altLL,				  "<DT class = 'DT1'>LRT  = ",LRT,"<DT class = 'DTH'>p-value = ", myPV, "</DL>");				colors = {{"#44FF44","#FF4444"}};				  				  fprintf (stdout, "</DIV>");if (myPV <= _in_p_value){	fprintf (stdout, "<H1 class = 'SuccessCap' style = 'font-size:24px;'>There is evidence of positive selection in these data at p &lt; ", _in_p_value, "</H1>"); }				  else{	fprintf (stdout, "<H1 class = 'SuccessCap' style = 'background-color: red;font-size:24px;'>There is NO evidence of positive selection in these data at p &lt; ", _in_p_value, "</H1>"); }fprintf (stdout, "<DIV CLASS='RepClassSM'>\n<b>Inferred rate distributions</b> for the null model (M1)<p><TABLE><TR><TD>");reportADistribution (c1,"Synonymous rate","dS");fprintf (stdout, "</TD><TD>");reportADistribution (d1,"dN/dS ratio &omega;","&omega;");fprintf (stdout, "</TD></TR></TABLE></DIV><DIV CLASS='RepClassSM'>\n<b>Inferred rate distributions</b> for the alternative model (M2)<p><TABLE><TR><TD>");reportADistribution (c2,"Synonymous rate","dS");fprintf (stdout, "</TD><TD>");reportADistribution (d2,"dN/dS ratio &omega;","&omega;");fprintf (stdout, "</TD></TR></TABLE></DIV>");PARRIS_SummaryTable                = {};PARRIS_SummaryTable ["COL_KEY"]    = "STRING";PARRIS_SummaryTable ["COL_VALUE"]  = "STRING";_CheckDBID 		  (slacDBID,"PARRIS_SUMMARY",PARRIS_SummaryTable);record = {};record ["COL_KEY"] = "NominalP";record ["COL_VALUE"] = _in_p_value;_InsertRecord (slacDBID,"PARRIS_SUMMARY", record);record ["COL_KEY"] = "TreeLengths";record ["COL_VALUE"] = ""+treeLengthArray;_InsertRecord (slacDBID,"PARRIS_SUMMARY", record);record ["COL_KEY"] = "NullLL";record ["COL_VALUE"] = nullLL;_InsertRecord (slacDBID,"PARRIS_SUMMARY", record);record ["COL_KEY"] = "AltLL";record ["COL_VALUE"] = altLL;_InsertRecord (slacDBID,"PARRIS_SUMMARY", record);record ["COL_KEY"] = "TestP";record ["COL_VALUE"] = myPV;_InsertRecord (slacDBID,"PARRIS_SUMMARY", record);record ["COL_KEY"] = "TreeMode";record ["COL_VALUE"] = treeMode;_InsertRecord (slacDBID,"PARRIS_SUMMARY", record);