ExecuteAFile("../Shared/HyPhyGlobals.ibf");ExecuteAFile("../Shared/GrabBag.bf");fscanf		(stdin,"String", filePrefix);fscanf		(stdin,"Number", optionOutput);if (optionOutput >= 4){	fscanf		(stdin,"String", gnuplotFormat);	fscanf		(stdin,"String", style);	fscanf		(stdin,"String", xaxis);	fscanf		(stdin,"String", yaxis);	fscanf		(stdin,"String", size);} /* ________________________________________________________________________________________________*/function ErrorOut (errString){	fprintf (stdout, "ERROR:<DIV class = 'ErrorTagSM'>\n", errString, "\n</DIV>");	return 0;}/* ________________________________________________________________________________________________*/baseAIC    = 0;baseAICc   = 0;baseBIC	   = 0;canUseAICc = 1;DB_FIELD_MAP = {};DB_FIELD_MAP [0] = "Site";DB_FIELD_MAP [1] = "BPSupport";DB_FIELD_MAP [2] = "TreeLength";if (optionOutput!=2){	ExecuteAFile	("../Shared/DBTools.ibf");	slacDBID 		 = _openCacheDB      (filePrefix);}if (optionOutput < 2){	generalInfo = _ExecuteSQL  (slacDBID,"SELECT * FROM GARD_DETAILS ORDER BY Site");	titleMatrix 	= {1,3};	titleMatrix[0]  = "Site";	titleMatrix[1]  = "Support for BP";	titleMatrix[2]  = "Tree length (subs/site)";		rowCount = Abs	   (generalInfo);	colCount = Columns (titleMatrix);	gardInfo = {rowCount, colCount};	for (r=0; r<rowCount; r=r+1)	{		for (c=0; c<colCount; c=c+1)		{			fieldLookup = DB_FIELD_MAP [c];			if (Abs(fieldLookup))			{				gardInfo[r][c] = (generalInfo[r])[fieldLookup]; 			}			else			{				gardInfo[r][c] = "N/A"; 								}		}	}	if (optionOutput == 1)	{		fprintf (stdout, titleMatrix[0]);		for (r=1; r<colCount; r=r+1)		{			fprintf (stdout, ",", titleMatrix[r]);		}		for (r=0; r<rowCount; r=r+1)		{			fprintf (stdout, "\n", gardInfo[r][0]);			for (c=1; c<colCount; c=c+1)			{				fprintf (stdout, ",", gardInfo[r][c]);			}		}	}	else	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Detailed GARD results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<DIV CLASS = 'RepClassSM'>Detailed analysis results (see legend at the bottom of the page)");						fprintf (stdout, "<TABLE BORDER = '0' style = 'margin:10px'><TR class = 'TRReportT'>");		for (r=0; r<colCount; r=r+1)		{			fprintf (stdout, "<TD>", titleMatrix[r], "</TD>");		}		fprintf (stdout, "</TR>\n");										for (r=0; r<rowCount; r=r+1)		{			rowString = ""; rowString * 128;			hitCount  = 0;			trClass = "TRReport1";			rowString *("<TD>" + gardInfo[r][0] + "</TD>");										myWeight = (0+gardInfo[r][1]);			meColor  = ((1-myWeight)*255$1);			meColor  = "<TD style = 'color: black; background-color: RGB(255,"+meColor+","+meColor+");'>";			rowString * (meColor + gardInfo[r][1] + "</TD>");			rowString *("<TD>" + gardInfo[r][2] + "</TD>");							rowString * 0;			fprintf (stdout, "<TR class = 'TRReport1'>", rowString, "</TR>\n");		}		fprintf (stdout, "</TABLE>");						fscanf ("../Formats/gard_report","Raw",gard_Legend);		fprintf (stdout, gard_Legend);		fprintf (stdout, "</DIV>");	}}else{	if (optionOutput == 2)	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Generate selection plots</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<FORM method='POST' name = 'plotForm' enctype='multipart/form-data' action='",BASE_CGI_URL_STRING,"rungnuplot.pl' target = '_blank'>\n<input type = 'hidden' value = '",filePrefix,"' name = 'inFile'><input type = 'hidden' value = '21' name = 'task'>");		formatName = "../Formats/gardplot";		fscanf  (formatName,"Raw",gardplot);		fprintf (stdout, gardplot, "</form>");	}	else	{		if (optionOutput >= 4)		{			fprintf (stdout, "set term ", gnuplotFormat);			if (gnuplotFormat == "png")			{				fprintf (stdout, " ", size);			}			fprintf (stdout, "\nset output\nset nokey\nset xlabel '", xaxis, "'\nset ylabel '",yaxis, "'\nplot '-' lt -1 with ",style,"\n");			pv = _ExecuteSQL  (slacDBID,"SELECT "+ DB_FIELD_MAP[optionOutput-4] +" FROM GARD_DETAILS ORDER BY SITE");			for (k=0; k<Abs(pv); k=k+1)			{				fprintf (stdout, "\n", k+1, "\t", pv[k]);			}		}		else		{			fprintf (stdout,"<script type=\"text/javascript\" src=\"http://www.datamonkey.org/js/tabber.js\"></script><link rel=\"stylesheet\" href=\"http://www.datamonkey.org/js/tabber.css\" TYPE=\"text/css\" MEDIA=\"screen\"><script type=\"text/javascript\">document.write('<style type=\"text/css\">.tabber{display:none;}</style>');</script>");			fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Best GARD trees</H1>");			fprintf (stdout, _makeJobIDHTML (filePrefix),"<div class='tabber'>");						splitsInfo  = _ExecuteSQL  (slacDBID,"SELECT * FROM GARD_SPLITS ORDER BY LEFT");							UseModel (USE_NO_MODEL);			imageWidth = 400;						/* compute pairwise RF distances */						treeCount 		= Abs (splitsInfo);			RF 				= {treeCount,treeCount};			consensusTree 	= "";						rooted			= {};			reduced			= {};						ACCEPT_ROOTED_TREES = 1;						maxRF				= 0;						for (tree1 = 0; tree1 < treeCount; tree1 = tree1+1)			{				if (tree1 == 0)				{					ExecuteCommands ("Tree TP1 = " + (splitsInfo[tree1])["TREE"]);					rootOn = TipName (TP1, 0);					rooted [0] = RerootTree (TP1,rootOn);					reduced[0] = (rooted [0] ^{{"\,[^\,]+$"}{""}});					reduced[0] = (reduced[0])[1][Abs(reduced[0])-1];					consensusTree = reduced [0];				}				ExecuteCommands ("Tree TP1 = " + reduced[tree1]);								for (tree2 = tree1+1; tree2 < treeCount; tree2 = tree2+1)				{					if (Abs(rooted[tree2]) == 0)					{						ExecuteCommands ("Tree TP2 = " + (splitsInfo[tree2])["TREE"]);						rooted [tree2] = RerootTree (TP2,rootOn);						reduced[tree2] = (rooted [tree2] ^{{"\,[^\,]+$"}{""}});						reduced[tree2] = (reduced[tree2])[1][Abs(reduced[tree2])-1];					}					ExecuteCommands ("Tree TP2 = " + reduced[tree2]);					d1 = TP1*TP2;					d2 = TP2*TP1;										d = ((d1["CLUSTERS"])[0] - (d1["CLUSTERS"])[1] + (d2["CLUSTERS"])[0] - (d2["CLUSTERS"])[1])/2;										RF[tree1][tree2] = d;					RF[tree2][tree1] = d;										maxRF = Max(maxRF,(d1["CLUSTERS"])[0]);										if (tree1 == 0)					{						Tree CT = consensusTree;						d = CT*TP2;						consensusTree = d["CONSENSUS"];					}				}			}						consensusTree = "(" + rootOn + "," + consensusTree[1][Abs(consensusTree)-1];						ACCEPT_ROOTED_TREES = 0;						splitStrings		= {};			for (partID = 0; partID < treeCount; partID = partID + 1)			{				splitDesc =  ""+ (1+(splitsInfo[partID])["LEFT"]) + "-" +  (1+(splitsInfo[partID])["RIGHT"]);				fprintf (stdout, "<div class='tabbertab'><H2>Segment ", partID+1, "</H2><p><b>Segment span ", splitDesc , "</b><p><i>Rooted on ", rootOn, "</i><p>");				splitStrings[partID] = splitDesc;				ExecuteCommands ("Tree T = " + rooted[partID]);				imageHeight = Min(1600,Max(200,25 * TipCount(T)));								fileSuffix = filePrefix + "_gard_tree_" + partID;				fileName   = BASE_OUTPUT_PATH + fileSuffix + ".ps";				fprintf (fileName, CLEAR_FILE, PSTreeString (T, "STRING_SUPPLIED_LENGTHS", {{imageWidth, imageHeight}}));								fprintf (stdout, "<IMG BORDER = 1 WIDTH = '",imageWidth,"' HEIGHT = '",imageHeight,"' SRC = '",BASE_CGI_URL_STRING,"renderPSImage.pl?file=",fileSuffix,"'><p>");				fprintf (stdout, "Save this plot as <A HREF='",BASE_CGI_URL_STRING,"renderPSImage.pl?file=",fileSuffix,"&doPDF'>[PDF]</a>");				fprintf (stdout, "</DIV>");			}						fprintf (stdout, "<div class='tabbertab'><H2>Consensus</H2><p><b>Strict consensus of all segment trees</b><p>");			ExecuteCommands ("Tree T = " + consensusTree);			imageHeight = Min(1600,Max(200,25 * TipCount(T)));						fileSuffix = filePrefix + "_gard_tree_" + treeCount;			fileName   = BASE_OUTPUT_PATH + fileSuffix + ".ps";			fprintf (fileName, CLEAR_FILE, PSTreeString (T, "", {{imageWidth, imageHeight}}));						fprintf (stdout, "<IMG BORDER = 1 WIDTH = '",imageWidth,"' HEIGHT = '",imageHeight,"' SRC = '",BASE_CGI_URL_STRING,"renderPSImage.pl?file=",fileSuffix,"'><p>");			fprintf (stdout, "Save this plot as <A HREF='",BASE_CGI_URL_STRING,"renderPSImage.pl?file=",fileSuffix,"&doPDF'>[PDF]</a>");			fprintf (stdout, "</DIV>");						fprintf (stdout, "<div class='tabbertab'><H2>Robinson-Foulds</H2><DIV CLASS='RepClassSM'><b>Pairwise Robinson-Foulds distances",							  "</b><br>Color intensity = degree of topological similarity (brighter - higher, lighter - lower).");							  						stateSpaceDimension = Columns(characters);			fprintf (stdout, "<TABLE BORDER = '0' CELLSPACING='1' style = 'margin:12px'><TR class = 'HeaderClass' style = 'font-size:10px;'><td></td>");						for (c = 0; c < treeCount; c = c + 1)			{				fprintf (stdout, "<td>", splitStrings[c], "</td>");			}						fprintf (stdout, "</tr>");									for (r = 0; r < treeCount; r = r + 1)			{					fprintf (stdout, "<TR class = 'TRReport1' style = 'font-size: 10px;background-color: transparent;'>");				fprintf (stdout, "<TD class = 'HeaderClass' style = 'font-size: 10px'><b>", splitStrings[r], "</b></TD>");							for (c = 0; c < treeCount; c = c + 1)				{					if (r != c)					{						meColor  = ((RF[r][c]/maxRF)*255$1);						meColor  = "<TD style = 'color: black; background-color: RGB(255,"+meColor+","+meColor+");'>";									fprintf (stdout, meColor,RF[r][c],"</td>");					}					else					{						fprintf (stdout, "<td>-</td>");							}				}					fprintf (stdout, "</tr>");			}			fprintf (stdout, "</table></DIV></DIV></DIV>");					}	}}if (optionOutput!=2){	_closeCacheDB (slacDBID);}