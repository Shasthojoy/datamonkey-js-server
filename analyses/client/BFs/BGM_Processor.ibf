ExecuteAFile ("../Shared/OutputsBGM.bf");inFilePath		= BASE_OUTPUT_PATH + filePrefix;fPath 			= inFilePath;relativeURL  	= inFilePath $ "/[^/]+$";h 				= relativeURL[0];relativeURL		= inFilePath[h+1][Abs(inFilePath)-1];fName			= fPath + "_" + suffix[kind] + ".php";fprintf			(fName, CLEAR_FILE,"<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'><meta http-equiv='refresh' content='60'><title>Almost there...</title></head><body>Generating a report...this page will refresh in 1 minute (or you can try sooner)");sscanf (rawIn,"Number,Number,NMatrix,NMatrix,NMatrix",cutoff,parents,siteIndexer,pairwiseProbs,logLTrace);BGM_SummaryTable = {};BGM_SummaryTable ["COL_KEY"] 	= "STRING";BGM_SummaryTable ["COL_VALUE"]  = "STRING";if (haveAncestralSamples){	siteCount     = Sqrt(Columns(pairwiseProbs));	replicateCount = Rows(pairwiseProbs);	fprintf			(fName,"<p>Step 1/4. Read data on ", siteCount, " sites and ", replicateCount, " ancestral replicates");}else{	siteCount     = Columns(pairwiseProbs);	fprintf			(fName,"<p>Step 1/3. Read data on ", siteCount, " sites");}_CheckDBID (slacDBID,"BGM_RESULTS",BGM_ResultTable);record = {};fields = Rows(BGM_ResultTable);fc	   = siteCount*(siteCount-1)$2;generalInfo 	= _ExecuteSQL  (slacDBID,"SELECT * FROM FILE_INFO");genCodeID		= 0+(generalInfo[0])["genCodeID"];dataAdjective = returnDataAdjective (genCodeID,0);fprintf (stdout, "<H1 CLASS='SuccessCap'>Spidermonkey/BGM analysis results</H1>");jobFileName = BASE_CGI_URL_STRING + "slacreport.pl?file=" + filePrefix + "&task=6&format=";fprintf (stdout, "<DIV CLASS='RepClassCT'><b>Reports</b> <a href='",jobFileName,"0'>[HTML]</a> <a href='",			        jobFileName,"1' target = '_blank'>[CSV]</a> <a href='",jobFileName,"2",			        "'>[Plots]</a></DIV>");			        fprintf (stdout, _makeJobIDHTML(filePrefix));fprintf (stdout, "<DIV CLASS='RepClassSM'>Constructed a ", parents, "-parent network on ", 				 siteCount, " nodes (",dataAdjective," sites). Ancestral sampling is ");				if (haveAncestralSamples){	fprintf (stdout,"<b>on</b></DIV>");}else{	fprintf (stdout,"<b>off</b></DIV>");}currentP      = 0;if (haveAncestralSamples){	_CheckDBID (slacDBID,"BGM_RESULTS_SA",BGM_SATable);		allRecords  = {};			record 		= {};				 	for (r = 1; r < replicateCount; r=r+1)	{		record["Replicate"] = r;		for (i = 0; i < siteCount; i = i+1)		{			record ["Codon1"] = siteIndexer[i];			for (j = i+1; j < siteCount; j = j + 1)			{				record ["Codon2"] = siteIndexer[j];				record ["Edge12"] = pairwiseProbs[r][i*siteCount+j];				record ["Edge21"] = pairwiseProbs[r][j*siteCount+i];				edgeCounter = BGM_RESULTS_SA + 1;				allRecords[Abs(allRecords)] = record;			}		}	}	_InsertMultipleRecords (slacDBID,"BGM_RESULTS_SA", allRecords);		allRecords = 0;		fprintf			(fName,"<p>Step 2/4 Populated sampling results tables");	_sumRecords   = _ExecuteSQL (slacDBID, "SELECT CODON1 AS CODON1,CODON2 AS CODON2, SUM(EDGE12) AS S12, SUM(EDGE21) AS S21 FROM BGM_RESULTS_SA  GROUP BY CODON1,CODON2 ORDER BY CODON1, CODON2");		e12e21byCodon = {};		j = Abs (_sumRecords);	countMatrix = {{2,1}};	for (i = 0; i < j; i=i+1)	{		countMatrix[0] = 0 + (_sumRecords[i])["S12"];		countMatrix[1] = 0 + (_sumRecords[i])["S21"];		key = (_sumRecords[i])["CODON1"] + "|" + (_sumRecords[i])["CODON2"];		e12e21byCodon[key] = countMatrix;	}	record = {};					 	for (i = 0; i < siteCount; i = i+1)	{		record ["Codon1"] = siteIndexer[i];		for (j = i+1; j < siteCount; j = j + 1)		{			record ["Codon2"] = siteIndexer[j];			record ["Edge12"] = pairwiseProbs[0][i*siteCount+j];			record ["Edge21"] = pairwiseProbs[0][j*siteCount+i];						key1 = "" + siteIndexer[i]  + "|" + siteIndexer[j];			cachedReplicateValues = e12e21byCodon[key1];					if (Abs (cachedReplicateValues) == 0)			{				key1 = "" + siteIndexer[j]  + "|" + siteIndexer[i];				cachedReplicateValues = e12e21byCodon[key1];					}						record ["E12"] = cachedReplicateValues[0]/(replicateCount-1);			record ["E21"] = cachedReplicateValues[1]/(replicateCount-1);						_InsertRecord (slacDBID,"BGM_RESULTS", record);			}	}	fprintf			(fName,"<p>Step 3/4 Populated interacting pairs tables");}else{	record = {};				 	for (i = 0; i < siteCount; i = i+1)	{		record ["Codon1"] = siteIndexer[i];		for (j = i+1; j < siteCount; j = j + 1)		{			record ["Codon2"] = siteIndexer[j];			record ["Edge12"] = pairwiseProbs[i][j];			record ["Edge21"] = pairwiseProbs[j][i];			_InsertRecord (slacDBID,"BGM_RESULTS", record);			}	}	fprintf			(fName,"<p>Step 2/3 Populated interacting pairs tables");}_res = _ExecuteSQL (slacDBID, "SELECT Codon1,Codon2,Edge12,Edge21,E12,E21,Edge12+Edge21 as SUM FROM BGM_RESULTS WHERE Edge12 + Edge21 >= " + cutoff + " ORDER BY Codon1, Codon2");matchedEdges = Abs(_res);				 ExecuteAFile 	 ("../Shared/bgmTablePrinter.ibf");	_CheckDBID 		  (slacDBID,"BGM_SUMMARY",BGM_SummaryTable);record = {};record ["COL_KEY"] = "Parents";record ["COL_VALUE"] = parents; 		 _InsertRecord (slacDBID,"BGM_SUMMARY", record);record ["COL_KEY"] = "Nodes"; record ["COL_VALUE"] = siteCount;		 _InsertRecord (slacDBID,"BGM_SUMMARY", record);record ["COL_KEY"] = "Trace"; record ["COL_VALUE"] = ""+logLTrace;	 _InsertRecord (slacDBID,"BGM_SUMMARY", record);record ["COL_KEY"] = "Cutoff"; record ["COL_VALUE"] = cutoff;		 _InsertRecord (slacDBID,"BGM_SUMMARY", record);record ["COL_KEY"] = "Edges"; record ["COL_VALUE"] = matchedEdges;	 _InsertRecord (slacDBID,"BGM_SUMMARY", record);traceOut		 = BASE_OUTPUT_PATH + filePrefix +"_"+suffix[kind]+".ps";tracePoints		 = Rows (logLTrace);traceMatrix      = {tracePoints,2} ["_MATRIX_ELEMENT_ROW_+1"];colors			 = {tracePoints,3};traceMin = 1e10;traceMax = -1e10;for (i = 0; i < tracePoints; i = i+1){	traceMatrix[i][1] = logLTrace[i];	traceMin = Min (traceMin,logLTrace[i]); 	traceMax = Max (traceMax,logLTrace[i]); }traceMax = traceMax-traceMin;traceMin = traceMin-2*traceMax;traceMax = traceMin+4*traceMax;fprintf			(fName,"<p>Step 4/4 Writing PostScript files");ExecuteAFile ("ScatterPlot.bf");ranges	= {{1,tracePoints+1}		   {traceMin,traceMax}};fprintf 	 (traceOut,CLEAR_FILE, 				ScatterPlot ("traceMatrix", 							  ranges,							  {{600,300,10}},							  colors,							  0,							  {{"","Sample","LogL"}})			);fprintf (stdout, "<DIV CLASS='RepClassSM'>MCMC sample trace<p>",				 "<IMG BORDER='2' WIDTH = '650' HEIGHT = '340' ALT = 'MCMC Trace' SRC = '",filePrefix,"_",suffix[kind],".png'>",				 "</DIV>");