ExecuteAFile("../Shared/HyPhyGlobals.ibf");ExecuteAFile("../Shared/GrabBag.bf");fscanf		(stdin,"String", filePrefix);fscanf		(stdin,"Number", optionOutput);if (optionOutput >= 4){	fscanf		(stdin,"String", gnuplotFormat);	fscanf		(stdin,"String", style);	fscanf		(stdin,"String", xaxis);	fscanf		(stdin,"String", yaxis);	fscanf		(stdin,"String", size);} /* ________________________________________________________________________________________________*/function ErrorOut (errString){	fprintf (stdout, "ERROR:<DIV class = 'ErrorTagSM'>\n", errString, "\n</DIV>");	return 0;}/* ________________________________________________________________________________________________*/if (optionOutput!=2){	ExecuteAFile	("../Shared/DBTools.ibf");	slacDBID 		 = _openCacheDB      (filePrefix);	if (optionOutput != 3)	{		pv = _ExecuteSQL  (slacDBID,"SELECT COL_VALUE FROM SLAC_SUMMARY WHERE COL_KEY = 'PValue'");		pv = 0+pv[0];	}	generalInfo = _ExecuteSQL  (slacDBID,"SELECT * FROM FILE_INFO");	genCodeID		= 0+(generalInfo[0])["genCodeID"];	if (genCodeID < 0 && optionOutput != 3)	{		ErrorOut ("This option combination is not supported.");		return 0;	}}if (optionOutput < 2){	generalInfo = _ExecuteSQL  (slacDBID,"SELECT * FROM SLAC_RESULTS");	titleMatrix 	= {1,13};	titleMatrix[0]  = "Codon";	titleMatrix[1]  = "Observed S Changes";	titleMatrix[2]  = "Observed NS Changes";	titleMatrix[3]  = "E[S Sites]";	titleMatrix[4]  = "E[NS Sites]";	titleMatrix[5]  = "Observed S. Prop.";	titleMatrix[6]  = "P{S}";	titleMatrix[7]  = "dS";	titleMatrix[8]  = "dN";	titleMatrix[9]  = "dN-dS";	if (optionOutput == 1)	{		titleMatrix[10] = "P{NS >= observed}";		titleMatrix[11] = "P{NS <= observed}";	}	else	{		titleMatrix[10] = "P{NS &#62;= observed}";		titleMatrix[11] = "P{NS &#60;= observed}";	}	titleMatrix[12] = "Normalized dN-dS";	rowCount = Abs	   (generalInfo);	colCount = Columns (titleMatrix);	slacInfo = {rowCount, colCount};	for (r=0; r<rowCount; r=r+1)	{		for (c=0; c<colCount; c=c+1)		{			slacInfo[r][c] = 0+(generalInfo[r])["FIELD_"+c]; 		}	}	slacInfo = slacInfo % 0;	if (optionOutput == 1) /* CSV */	{		fprintf (stdout, titleMatrix[0]);		for (r=1; r<colCount; r=r+1)		{			fprintf (stdout, ",", titleMatrix[r]);		}		for (r=0; r<rowCount; r=r+1)		{			fprintf (stdout, "\n", slacInfo[r][0]+1);			for (c=1; c<colCount; c=c+1)			{				fprintf (stdout, ",", slacInfo[r][c]);			}		}	}	else	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Detailed SLAC results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<DIV CLASS = 'RepClassSM'>Detailed analysis results (see legend at the bottom of the page)");						fprintf (stdout, "<TABLE BORDER = '0' style = 'margin:10px'><TR class = 'TRReportT'>");		for (r=0; r<colCount; r=r+1)		{			fprintf (stdout, "<TD>", titleMatrix[r], "</TD>");		}		fprintf (stdout, "</TR>\n");		for (r=0; r<rowCount; r=r+1)		{			trClass = "TRReportNT";			if (slacInfo[r][1]+slacInfo[r][2] > 0)			{				if (slacInfo[r][10]<=pv)				{					trClass = "TRReportPS";				}				else				{					if (slacInfo[r][11]<=pv)					{						trClass = "TRReportNS";					}								}			}			fprintf (stdout, "<TR class = '",trClass,"' style = 'font-size:9px;'>");			fprintf (stdout, "<TD>", r+1, "</TD>");			for (c=1; c<colCount; c=c+1)			{				if (slacInfo[r][c]$1 != slacInfo[r][c])				{					fprintf (stdout, "<TD>", Format (slacInfo[r][c],5,2), "</TD>");				}				else				{					fprintf (stdout, "<TD>", slacInfo[r][c], "</TD>");								}			}			fprintf (stdout, "</TR>\n");		}		fprintf (stdout, "</TABLE>");						fscanf ("../Formats/slac_report","Raw",slac_Legend);		fprintf (stdout, slac_Legend);		fprintf (stdout, "</DIV>");	}}else{	if (optionOutput == 3)	{		if (genCodeID >= 0)		{			varSites    = _ExecuteSQL  (slacDBID,"SELECT DISTINCT AbsSite  FROM SLAC_MUTATION ORDER BY AbsSite");			generalInfo = _ExecuteSQL  (slacDBID,"SELECT Partition,Site,AbsSite,S,NS,StartAA,EndAA FROM SLAC_MUTATION");			byResidue	= {21,21};			charCount   = 20;		}		else		{			varSites    = _ExecuteSQL  (slacDBID,"SELECT DISTINCT AbsSite  FROM SUBSTITUTIONS ORDER BY AbsSite");					generalInfo = _ExecuteSQL  (slacDBID,"SELECT Partition,Site,AbsSite,StartResidue,EndResidue FROM SUBSTITUTIONS");			if (genCodeID == (-1))			{				residueMap = "ACGT";			}			else			{				residueMap = "ACDEFGHIKLMNPQRSTVWY";			}			charCount = Abs (residueMap);			charMap = {};			for (r=0; r<charCount; r=r+1)			{				charMap[residueMap[r]] = r+1;			}			byResidue	= {charCount+1,charCount+1};		}				siteCount	= Abs(varSites);		siteMap		= {};		for (r=0; r<siteCount; r=r+1)		{			siteMap[0+varSites[r]] = Abs(siteMap)+1;		}				rowCount = Abs	   (generalInfo);		mutationInfo 	 = {siteCount, 4+2*(genCodeID>=0)};				maxP 	= 0+(generalInfo[rowCount-1])["Partition"];				for (r=0; r<rowCount; r=r+1)		{			mappedIndex 				 = siteMap[0+(generalInfo[r])["AbsSite"]]-1;						mutationInfo[mappedIndex][0] = 0+(generalInfo[r])["AbsSite"];			mutationInfo[mappedIndex][1] = 0+(generalInfo[r])["Partition"];			mutationInfo[mappedIndex][2] = 0+(generalInfo[r])["Site"];						if (genCodeID >= 0)			{				mutationInfo[mappedIndex][3] = mutationInfo[mappedIndex][3]+(generalInfo[r])["S"];				mutationInfo[mappedIndex][4] = mutationInfo[mappedIndex][4]+(generalInfo[r])["NS"];				startAA = 0+(generalInfo[r])["StartAA"];				endAA   = 0+(generalInfo[r])["EndAA"];				if (startAA > 10)				{					startAA = startAA-1;				}				else				{					if (startAA < 0)					{						startAA = 20;					}				}					if (endAA > 10)				{					endAA = endAA-1;				}				else				{					if (endAA < 0)					{						endAA = 20;					}				}					byResidue[startAA][endAA] = byResidue[startAA][endAA]+1;			}			else			{				mutationInfo[mappedIndex][3] = mutationInfo[mappedIndex][3]+1;				startAA = charMap[(generalInfo[r])["StartResidue"]];				if (startAA == 0)				{					startAA = charCount;								}				else				{					startAA = startAA-1;				}								endAA   = charMap[(generalInfo[r])["EndResidue"]  ];				if (endAA == 0)				{					endAA = charCount;								}				else				{					endAA = endAA-1;				}				byResidue[startAA][endAA] = byResidue[startAA][endAA] + 1;			}		}					maxN = 0;		summaryColumns = 2+2*(genCodeID>=0);		byPartition  = {maxP,summaryColumns};				for (r=0; r<siteCount; r=r+1)		{			myPartition = mutationInfo[r][1]-1;			byPartition [myPartition][0] = byPartition [myPartition][0]+1;			byPartition [myPartition][1] = byPartition [myPartition][1]+mutationInfo[r][3];			if (genCodeID >= 0)			{				mutationInfo[r][5] = mutationInfo[r][4]+mutationInfo[r][3];				maxN = Max(maxN,mutationInfo[r][5]);				byPartition [myPartition][2] = byPartition [myPartition][2]+mutationInfo[r][4];				byPartition [myPartition][3] = byPartition [myPartition][3]+mutationInfo[r][5];			}			else			{				maxN = Max(maxN,mutationInfo[r][3]);						}		}				dataType = "";		if (genCodeID == (-1))		{			dataType = "&dataType=1";		}		else		{			if (genCodeID == (-2))			{				dataType = "&dataType=2";			}		}				fprintf (stdout, "<H1 CLASS = 'SuccessCap' style = 'text-transform: none;'>Inferred substitution report</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<DIV CLASS = 'RepClassSM'><b>Substitution summary by partition.</b>",						  "<span style = 'font-size:10px;'> Map by branch as <a href='",BASE_CGI_URL_STRING,"siteMap.pl?file=",filePrefix,"&site=-1&mode=0",dataType,"'>[PDF]</a>|<a href='",BASE_CGI_URL_STRING,"siteMap.pl?file=",filePrefix,"&site=-1&mode=2",dataType,"'>[HTML]</a></span>");				if (genCodeID >= 0)		{			fprintf (stdout, "<TABLE BORDER = '0' CELLSPACING='0' style = 'margin:10px'><TR class = 'HeaderClass' style = 'font-size:13px;'><TD>Partition</TD><TD>Variable Sites</TD><TD COLSPAN = '3'># Substitutions</TD></TR>",							 "<TR class = 'HeaderClass' style = 'font-size:13px;'><TD></TD><TD></TD><TD>Synonymous</TD><TD>Non-synonymous</TD><TD>Total</TD>");		}		else		{			fprintf (stdout, "<TABLE BORDER = '0' CELLSPACING='0' style = 'margin:10px'><TR class = 'HeaderClass' style = 'font-size:13px;'><TD>Partition</TD><TD>Variable Sites</TD><TD># Substitutions</TD></TR>");				}		sums = {1,summaryColumns};				for (r=0; r<maxP; r=r+1)		{			fprintf (stdout, "<TR class = 'TRReport1' style = 'font-size: 13px;'>");			fprintf (stdout, "<TD><b>", r+1, "</b></TD>");			for (c=0; c<summaryColumns; c=c+1)			{				fprintf (stdout, "<TD>", byPartition[r][c], "</TD>");					sums[c] = sums[c] + byPartition[r][c];			}		}				fprintf (stdout, "<TR class = 'TRReport2' style = 'font-size: 13px;'><TD><b>Total</b></TD>");		for (c=0; c<summaryColumns; c=c+1)		{			fprintf (stdout, "<TD>", sums[c], "</TD>");			}		fprintf (stdout, "</TABLE></DIV>");		for (r=0; r<charCount; r=r+1)		{			for (c=r+1; c<=charCount; c=c+1)			{				maxS = Max(maxS,byResidue[r][c]+byResidue[c][r]);			}		}				if (genCodeID>=0)		{				residueMap =  	  {{"Phe",								"Leu",								"Ile",								"Met",								"Val",								"Ser",								"Pro",								"Thr",								"Ala",								"Tyr",								"His",								"Gln",								"Asn",								"Lys",								"Asp",								"Glu",								"Cys",								"Trp",								"Arg",								"Gly",								"Mix"}};			fprintf (stdout, "<DIV CLASS = 'RepClassSM'><b>Substitution summary by residue.</b><p><span style = 'font-size:10px;'>'Mix' represents a codon with one or more nucleotide mixture. Color intensity is proportional to the number of substitutions between two residues relative to the highest number for all pairs(brighter - more, lighter - fewer)</span>");		}		else		{			residueMap = residueMap + "X";			fprintf (stdout, "<DIV CLASS = 'RepClassSM'><b>Substitution summary by residue.</b><p><span style = 'font-size:10px;'>'",residueMap[charCount],"' represents an ambiguous base. Color intensity is proportional to the number of substitutions between two residues relative to the highest number for all pairs(brighter - more, lighter - fewer)</span>");		}				fprintf (stdout, "<TABLE BORDER = '0' CELLSPACING='1' style = 'margin:10px'><TR class = 'HeaderClass' style = 'font-size:10px;'><TD></TD>");				for (r=1; r<charCount; r=r+1)		{			fprintf (stdout, "<TD>", residueMap[r],"</TD>");		}		fprintf (stdout, "<TD style='color:black; background-color: white;'><b>", residueMap[r],"</b></TD>");		for (r=0; r<charCount; r=r+1)		{			fprintf (stdout, "<TR class = 'TRReport1' style = 'font-size: 10px;background-color: transparent;'>");			fprintf (stdout, "<TD style = 'background-color: white;'><b>", residueMap[r], "</b></TD>");						for (c=1; c<=r; c=c+1)			{				fprintf (stdout, "<TD></TD>");			}			for (c=r+1; c<=charCount; c=c+1)			{				mySC = byResidue[r][c]+byResidue[c][r];				if (mySC)				{					meColor = mySC/maxS*256$1;					/*if (meColor >= 164)					{						fprintf (stdout, "<TD style = 'color: white; background-color: RGB(",255-meColor,",255,",255-meColor,");'>");					}					else*/					{						fprintf (stdout, "<TD style = 'color: black; background-color: RGB(",255-meColor,",255,",255-meColor,");'>");					}					fprintf (stdout, mySC, "</TD>");				}				else				{					fprintf (stdout, "<TD></TD>");								}			}			fprintf (stdout, "</TR>\n");		}		fprintf (stdout, "</TR></TABLE></DIV>");		fprintf (stdout, "<DIV CLASS = 'RepClassSM'><b>Substitutions by site.</b><p><span style = 'font-size:10px;'>Color intensity reflects the number of substitutions at a site relative to the maximum for the dataset (brighter - more, lighter - fewer).");				if (genCodeID >= 0)		{			fprintf (stdout, " Fractional counts are due to averaging over multiple pathways when multiple nucleotides are substituted along a single branch.</span> <TABLE BORDER = '0' CELLSPACING='0' style = 'margin:10px'><TR class = 'HeaderClass' style = 'font-size:13px;'><TD>Codon</TD><TD>Partition</TD><TD># in partition</TD><TD COLSPAN = '3'># Substitutions</TD><TD>Additional</TD></TR>",						 	"<TR class = 'HeaderClass' style = 'font-size:13px;'><TD></TD><TD></TD><TD></TD><TD>Synonymous</TD><TD>Non-synonymous</TD><TD>Total</TD><TD>Information</TD></TR>");		}		else		{			fprintf (stdout, "</span> <TABLE BORDER = '0' CELLSPACING='0' style = 'margin:10px'><TR class = 'HeaderClass' style = 'font-size:13px;'><TD>Site</TD><TD>Partition</TD><TD># in partition</TD><TD># Substitutions</TD><TD>Additional Information</TD></TR>");		}		summaryColumns = 4+2*(genCodeID>=0);				for (r=0; r<siteCount; r=r+1)		{			meColor = mutationInfo[r][summaryColumns-1]/maxN*256$1;			if (meColor >= 164)			{				fprintf (stdout, "<TR class = 'TRReport1' style = 'font-size: 13px; color: white; background-color: RGB(255,",255-meColor,",",255-meColor,");'>");			}			else			{				fprintf (stdout, "<TR class = 'TRReport1' style = 'font-size: 13px; color: black; background-color: RGB(255,",255-meColor,",",255-meColor,");'>");						}			fprintf (stdout, "<TD><b>", mutationInfo[r][0], "</b></TD>");			for (c=1; c<summaryColumns; c=c+1)			{				fprintf (stdout, "<TD>", mutationInfo[r][c], "</TD>");			}			fprintf (stdout, "<TD style = 'font-size: 10px;'><a href='",BASE_CGI_URL_STRING,"siteMap.pl?file=",filePrefix,"&site=",mutationInfo[r][0]-1,"&mode=0",dataType,"'>[");						if (genCodeID >= 0)			{				fprintf (stdout, "Codons");			}			else			{				if (genCodeID == (-1))				{					fprintf (stdout, "Nucleotides");				}				else				{					fprintf (stdout, "Aminoacids");				}			}			fprintf (stdout, "]</a>");						if (genCodeID >= 0)			{				fprintf (stdout, "<a href='",BASE_CGI_URL_STRING,"siteMap.pl?file=",filePrefix,"&site=",mutationInfo[r][0]-1,"&mode=1",dataType,"'>[AA]</a>");			}			fprintf (stdout, "<a href='",BASE_CGI_URL_STRING,"siteMap.pl?file=",filePrefix,"&site=",mutationInfo[r][0]-1,"&mode=2",dataType,"'>[Counts]</a>",							 "</TD></TR>\n");		}		fprintf (stdout, "</TABLE></DIV>");	}	else	{		if (optionOutput == 2)		{			fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Generate selection plots</H1>");			fprintf (stdout, _makeJobIDHTML (filePrefix));			fprintf (stdout, "<FORM method='POST' name = 'plotForm' enctype='multipart/form-data' action='",BASE_CGI_URL_STRING,"rungnuplot.pl' target = '_blank'>\n<input type = 'hidden' value = '",filePrefix,"' name = 'inFile'>");			fscanf  ("../Formats/slacplot","Raw",slacplot);			fprintf (stdout, slacplot, "</form>");		}		else		{			fprintf (stdout, "set term ", gnuplotFormat);			if (gnuplotFormat == "png")			{				fprintf (stdout, " ", size);			}			fprintf (stdout, "\nset output\nset nokey\nset xlabel '", xaxis, "'\nset ylabel '",yaxis, "'\nplot '-' lt -1 with ",style,"\n");			pv = _ExecuteSQL  (slacDBID,"SELECT FIELD_"+ (optionOutput-4) +" FROM SLAC_RESULTS ORDER BY FIELD_0");			for (k=0; k<Abs(pv); k=k+1)			{				fprintf (stdout, "\n", k+1, "\t", pv[k]);			}		}	}}if (optionOutput!=2){	_closeCacheDB (slacDBID);}