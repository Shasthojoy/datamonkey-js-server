ExecuteAFile("../Shared/HyPhyGlobals.ibf");ExecuteAFile("../Shared/GrabBag.bf");fscanf		(stdin,"String", filePrefix);fscanf		(stdin,"Number", optionOutput);if (optionOutput >= 4){	fscanf		(stdin,"String", gnuplotFormat);	fscanf		(stdin,"String", style);	fscanf		(stdin,"String", xaxis);	fscanf		(stdin,"String", yaxis);	fscanf		(stdin,"String", size);} /* ________________________________________________________________________________________________*/function ErrorOut (errString){	fprintf (stdout, "ERROR:<DIV class = 'ErrorTagSM'>\n", errString, "\n</DIV>");	return 0;}/* ________________________________________________________________________________________________*/if (optionOutput!=2){	ExecuteAFile	("../Shared/DBTools.ibf");	slacDBID 		 = _openCacheDB      (filePrefix);	pv = _ExecuteSQL  (slacDBID,"SELECT COL_VALUE FROM FEL_SUMMARY WHERE COL_KEY = 'PValue'");	pv = 0+pv[0];	ExecuteAFile 			("../Shared/OutputsFEL.bf");	tableKeys = Rows		(FEL_ResultTable);}if (optionOutput < 2){	generalInfo = _ExecuteSQL  (slacDBID,"SELECT * FROM FEL_RESULTS ORDER BY Codon");		titleMatrix 	= {1,9};	titleMatrix[0]  = "Codon";	titleMatrix[1]  = "dS";	titleMatrix[2]  = "dN";	titleMatrix[3]  = "dN/dS";	titleMatrix[4]  = "Normalized dN-dS";	titleMatrix[5]  = "dS (when dN=dS)";	titleMatrix[6]  = "Log(L)";	titleMatrix[7]  = "LRT";	titleMatrix[8]  = "p-value";	rowCount  = Abs	   		(generalInfo);	colCount  = Abs	        (FEL_ResultTable);		colMap	  = {{0,1,2,-1,7,3,4,5,6}};	felInfo = {rowCount, colCount};		for (r=0; r<rowCount; r=r+1)	{		for (c=0; c<colCount; c=c+1)		{			felInfo[r][c] = 0+(generalInfo[r])[tableKeys[c]]; 		}	}	felInfo = felInfo % 0;		if (optionOutput == 1) /* CSV */	{		fprintf (stdout, titleMatrix[0]);		for (r=1; r<=colCount; r=r+1)		{			fprintf (stdout, ",", titleMatrix[r]);		}				for (r=0; r<rowCount; r=r+1)		{			fprintf (stdout, "\n", felInfo[r][0]);			for (c=1; c<=colCount; c=c+1)			{				if (c==3)				{					fprintf (stdout, ",", _normalizeRatio (felInfo[r][1],felInfo[r][2]));				}				else				{					fprintf (stdout, ",", felInfo[r][colMap[c]]);				}			}		}	}	else	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Detailed FEL results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<DIV CLASS = 'RepClassSM'>Detailed analysis results (see legend at the bottom of the page)");						fprintf (stdout, "<TABLE BORDER = '0' style = 'margin:10px'><TR class = 'TRReportT'>");		for (r=0; r<=colCount; r=r+1)		{			fprintf (stdout, "<TD>", titleMatrix[r], "</TD>");		}		fprintf (stdout, "</TR>\n");		for (r=0; r<rowCount; r=r+1)		{			trClass = "TRReportNT";			if (felInfo[r][1]+felInfo[r][2] > 0)			{				if (felInfo[r][colCount-2]<=pv)				{					if (felInfo[r][1]<felInfo[r][2])					{						trClass = "TRReportPS";								}					else					{						trClass = "TRReportNS";					}				}			}			fprintf (stdout, "<TR class = '",trClass,"' style = 'font-size:9px;'>");			fprintf (stdout, "<TD>", r+1, "</TD>");			for (c=1; c<=colCount; c=c+1)			{				if (c==3)				{					fprintf (stdout, "<TD>",_normalizeRatio (felInfo[r][1],felInfo[r][2]), "</TD>");				}				else				{					if (felInfo[r][colMap[c]]$1 != felInfo[r][colMap[c]])					{						fprintf (stdout, "<TD>", Format (felInfo[r][colMap[c]],5,2), "</TD>");					}					else					{						fprintf (stdout, "<TD>", felInfo[r][colMap[c]], "</TD>");									}				}			}			fprintf (stdout, "</TR>\n");		}		fprintf (stdout, "</TABLE>");						fscanf ("../Formats/fel_report","Raw",fel_Legend);		fprintf (stdout, fel_Legend);		fprintf (stdout, "</DIV>");	}}else{	if (optionOutput == 2)	{		fprintf (stdout, "<H1 CLASS = 'SuccessCap'>Generate selection plots from FEL results</H1>");		fprintf (stdout, _makeJobIDHTML (filePrefix));		fprintf (stdout, "<FORM method='POST' name = 'plotForm' enctype='multipart/form-data' action='",BASE_CGI_URL_STRING,"rungnuplot.pl' target = '_blank'>\n<input type = 'hidden' value = '",filePrefix,"' name = 'inFile'><input type = 'hidden' value = '1' name = 'task'>");		fscanf  ("../Formats/felplot","Raw",felplot);		fprintf (stdout, felplot, "</form>");	}	else	{		fprintf (stdout, "set term ", gnuplotFormat);		if (gnuplotFormat == "png")		{			fprintf (stdout, " ", size);		}		fprintf (stdout, "\nset output\nset nokey\nset xlabel '", xaxis, "'\nset ylabel '",yaxis, "'\nplot '-' lt -1 with ",style,"\n");		pv = _ExecuteSQL  (slacDBID,"SELECT "+ tableKeys[optionOutput-4] +" FROM FEL_RESULTS ORDER BY Codon");		if (optionOutput == 11)		{			for (k=0; k<Abs(pv); k=k+1)			{				fprintf (stdout, "\n", k+1, "\t", Max(-100,Min(0+pv[k],100)));			}				}		else		{			for (k=0; k<Abs(pv); k=k+1)			{				fprintf (stdout, "\n", k+1, "\t", pv[k]);			}		}	}}if (optionOutput!=2){	_closeCacheDB (slacDBID);}