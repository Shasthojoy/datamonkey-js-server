sscanf				(analysisSpecRaw,"Lines",analysisSpec);fileCount 			= 0+analysisSpec[0];mySplits 			= {};myTrees  			= {};for (_k2 = 0; _k2 < fileCount; _k2 = _k2 + 1){	mySplits[_k2]  = analysisSpec[1+2*_k2];	if (genCodeID >= 0)	{		_pos = splitOnRegExp(mySplits[_k2],"\\-");		_r1 = (0+_pos[0])%3;		if (_r1 == 2)		{			_r1 = (0+_pos[0])$3*3+3;		}		else		{			_r1 = (0+_pos[0])$3*3;							}		_r2 = (0+_pos[1])%3;		if (_r2 >=1)		{			_r2 = (0+_pos[1])$3*3+2;		}		else		{			_r2 = (0+_pos[1])$3*3-1;							}		mySplits[_k2]		 					 = Format(_r1,10,0)+"-"+Format(_r2,10,0);		}	myTrees [_k2]  = analysisSpec[2+2*_k2];}treeStrings			 = {};codonsByPartition    = {};DataSet 			ds 			 = ReadFromString (dataFileString);DataSetFilter		filteredData = CreateFilter	  (ds,1);if (genCodeID>=0){	DataSetFilter		codonData = CreateFilter	  (ds,3,"","",GeneticCodeExclusions);}_filterSizes			= {fileCount,3};/* species, sites, unique_patterns *//*------------------------------------------------------------------------*/for (fileID = 1; fileID <= fileCount; fileID = fileID + 1){	ExecuteCommands ("DataSetFilter filteredData_" + fileID + " = CreateFilter (ds,1,mySplits[fileID-1]);");	if (genCodeID>=0)	{		ExecuteCommands ("DataSetFilter codonData_" + fileID + " = CreateFilter (ds,3,mySplits[fileID-1],,GeneticCodeExclusions);");		ExecuteCommands ("_filterSizes[fileID-1][0] = codonData_" + fileID + ".species;_filterSizes[fileID-1][1] = codonData_" + fileID + ".sites;_filterSizes[fileID-1][2] = codonData_" + fileID + ".unique_sites;");	}	else	{		ExecuteCommands ("_filterSizes[fileID-1][0] = filteredData_" + fileID + ".species;_filterSizes[fileID-1][1] = filteredData_" + fileID + ".sites;_filterSizes[fileID-1][2] = filteredData_" + fileID + ".unique_sites;");	}		treeString = myTrees[fileID-1];	ExecuteCommands ("_filterSizes[fileID-1][0] = filteredData_" + fileID + ".species;_filterSizes[fileID-1][1] = filteredData_" + fileID + ".sites;_filterSizes[fileID-1][2] = filteredData_" + fileID + ".unique_sites;");	treeStrings[fileID] = myTrees[fileID-1];}/*------------------------------------------------------------------------*/function constructLF (lf_name, filter_pref, tree_pref, part_count){	lfDefCommand = "";	lfDefCommand * 128;	lfDefCommand * ("LikelihoodFunction  " + lf_name + " = (" + filter_pref + "_1," + tree_pref + "_1");		for (_partID = 2; _partID <= part_count; _partID = _partID + 1)	{		lfDefCommand * ("," + filter_pref + "_" + _partID + "," + tree_pref + "_" +  _partID);	}		lfDefCommand * ");";	lfDefCommand * 0;	return lfDefCommand;}/*------------------------------------------------------------------------*/function populateTrees (tree_pref, part_count){	lfDefCommand = "";	lfDefCommand * 128;		for (_partID = 1; _partID <= part_count; _partID = _partID + 1)	{		lfDefCommand * ("Tree " + tree_pref + "_" + _partID + " = " + treeStrings[_partID] + ";\n");	}		lfDefCommand * 0;	ExecuteCommands (lfDefCommand);	return 0;}/*------------------------------------------------------------------------*/