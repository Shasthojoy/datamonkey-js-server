/* ________________________________________________________________________	*/

function make_discrete_node (node_id, sample_size, max_parents)
{
	dnode = {};
	dnode["NodeID"] = node_id;
	dnode["PriorSize"] = sample_size;
	dnode["MaxParents"] = max_parents;
	return dnode;
}

function make_continuous_node (node_id, sample_size, mean, precision)
{
	cnode = {};
	cnode["NodeID"] 	= node_id;
	cnode["PriorSize"] 	= sample_size;
	cnode["MaxParents"] = max_parents;
	cnode["PriorMean"]	= mean;
	cnode["PriorVar"]	= precision;
	return cnode;
}

function make_banned_edge (parent, child)
{
	a_rule = {};
	a_rule["BanParent"] = parent;
	a_rule["BanChild"] = child;
	return a_rule;
}

/* ________________________________________________________________________	*/

discreteNodes 			= {};
continuousNodes 		= {};
banlist 				= {};

if (doAncestralResample)
{
	fprintf					  (stdout, CLEAR_FILE, "Here\n");
	GetString 				  (lfid, LikelihoodFunction, 0);
	ExecuteAFile 			  ("AncestralMapperBGM.bf");
	fprintf                   (MESSAGE_LOG,"\nHere2\n");
	
	
	ancCacheID 				= _buildAncestralCache (lfid, 0, 1);
        fprintf                    (MESSAGE_LOG, "\nHere3\n");

	nbranches 				= nbranches-1;
	bgm_data_matrix 		= {nbranches, num_nodes};


	for (site = 0; site < num_nodes; site = site+1)
	{
		thisSite = _mapMutations(ancCacheID,site_map[site]-1,1);
		for (branch = 0; branch < nbranches; branch = branch+1)
		{
			bgm_data_matrix[branch][site] = thisSite[branch];
		}
	}
    fprintf                    (MESSAGE_LOG, "\nHere4\n",bgm_data_matrix,"\n");
}
else
{
	num_nodes   			= Columns (bgm_data_matrix);
}

fprintf (MESSAGE_LOG,"\n", num_nodes, "\n");

for (k = 0; k < num_nodes; k = k+1)
{
	fprintf (MESSAGE_LOG, k, "/", num_nodes, " node made\n");
	discreteNodes[Abs(discreteNodes)] = make_discrete_node (k, 0, num_parents);
}

BGM_MCMC_BURNIN		= BGM_MCMC_DURATION $ 10;
BGM_MCMC_SAMPLES 	= BGM_MCMC_DURATION $ 1000;

BGM gen_bgm = 		(discreteNodes, continuousNodes);
fprintf              (MESSAGE_LOG, "\nHere5\n");


SetParameter 		(gen_bgm, BGM_DATA_MATRIX, 	 bgm_data_matrix);









fprintf                 (MESSAGE_LOG, "\nHere6\n");

/*
CovarianceMatrix 	(postp, gen_bgm);
*/
fprintf              (MESSAGE_LOG, "\nHere7\n");

if (doAncestralResample)
{
	_destroyAncestralCache (ancCacheID);
}
