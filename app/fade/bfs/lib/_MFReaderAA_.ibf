sscanf				(analysisSpecRaw,"Lines",analysisSpec);fileCount 			= 0+analysisSpec[0];mySplits 			= {};myTrees  			= {};for (_k2 = 0; _k2 < fileCount; _k2 += 1){	mySplits[_k2]  = analysisSpec[1+2*_k2];	myTrees [_k2]  = analysisSpec[2+2*_k2];}treeStrings			 = {};sitesByPartition     = {};DataSet 	ds_0 = ReadFromString (dataFileString);/*------------------------------------------------------------------------*/for (fileID = 1; fileID <= fileCount; fileID = fileID + 1){	DataSetFilter filteredData = CreateFilter (ds_0,1,mySplits[fileID-1]);	Export 		  (baseFPath,filteredData);		ExecuteCommands ( 	"DataSet	   ds_" +fileID + " = ReadFromString (baseFPath);"+	"DataSetFilter filteredData_" + fileID + " = CreateFilter (ds_"+fileID +",1);");	treeString = myTrees[fileID-1];		ExecuteCommands ("treeString_" + fileID + " = treeString;totalCharCount=totalCharCount+filteredData_"+					 fileID+".sites*filteredData_"+fileID+".species;totalSiteCount=totalSiteCount+filteredData_"+					 fileID+".sites;totalUniqueSites=totalUniqueSites+filteredData_"+fileID+".unique_sites;");					 	treeStrings[fileID] = treeString;}/*------------------------------------------------------------------------*/overallFrequencies 		  = {20,1};for (fileID = 1; fileID <= fileCount; fileID = fileID + 1){	ExecuteCommands 	  		("HarvestFrequencies (ts, filteredData_"+fileID+",1,1,1);cfs = filteredData_"+fileID+".sites;");	overallFrequencies  		= overallFrequencies + ts*(cfs/totalSiteCount);	sitesByPartition			[fileID] =  cfs;}/*------------------------------------------------------------------------*/function constructLF (lf_name, filter_pref, tree_pref, part_count){	lfDefCommand = "";	lfDefCommand * 128;	lfDefCommand * ("LikelihoodFunction  " + lf_name + " = (" + filter_pref + "_1," + tree_pref + "_1");		for (_partID = 2; _partID <= part_count; _partID = _partID + 1)	{		lfDefCommand * ("," + filter_pref + "_" + _partID + "," + tree_pref + "_" +  _partID);	}		lfDefCommand * ");";	lfDefCommand * 0;	return lfDefCommand;}/*------------------------------------------------------------------------*/function populateTrees(tree_pref, part_count){  lfDefCommand = "";  lfDefCommand * 128;    for (_partID = 1; _partID <= part_count; _partID = _partID + 1)  {    lfDefCommand * ("Tree " + tree_pref + "_" + _partID + " = " + treeStrings[_partID] + ";\n");  }    lfDefCommand * 0;  ExecuteCommands (lfDefCommand);	return 0;}/*------------------------------------------------------------------------*/